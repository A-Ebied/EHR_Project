// <auto-generated />
using System;
using EHR_API.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EHRAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230602142503_db5")]
    partial class db5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EHR_API.Entities.Models.Admit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AdmitAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LeaveAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("Admits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.AdmitProgressNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdmitId");

                    b.HasIndex("MedicalTeamId");

                    b.ToTable("AdmitProgressNote");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsChronic")
                        .HasColumnType("bit");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Reaction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("Allergies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Allergen = "التراب",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(1734),
                            Instruction = "---",
                            IsChronic = true,
                            Reaction = "سيلان الأنف والكحة",
                            RegistrationDataId = "12345678912351",
                            Type = "حساسية التراب",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(1738)
                        },
                        new
                        {
                            Id = 2,
                            Allergen = "الفول السوداني والحليب والبيض",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(1743),
                            Instruction = "",
                            IsChronic = true,
                            Reaction = "طفح جلدي",
                            RegistrationDataId = "12345678912352",
                            Type = "حساسية الطعام",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(1746)
                        },
                        new
                        {
                            Id = 3,
                            Allergen = "فراء الحيوانات ، وخاصة من الحيوانات الأليفة مثل القطط والكلاب",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(1750),
                            Instruction = "الابتعاد عن الحيوانات الأليفة",
                            IsChronic = true,
                            Reaction = "ضيق في الصدر وفقدان أنفاسك",
                            RegistrationDataId = "12345678912353",
                            Type = "حساسية الحيوانات الأليفة",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(1751)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.AllergyDrug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AllergyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.HasIndex("AllergyId", "MedicationId")
                        .IsUnique();

                    b.ToTable("AllergyDrugs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllergyId = 1,
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(2648),
                            MedicationId = 1,
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(2656)
                        },
                        new
                        {
                            Id = 2,
                            AllergyId = 1,
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(2663),
                            MedicationId = 2,
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(2665)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.BadHabit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Habit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("BadHabits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(1201),
                            Habit = "التدخين",
                            Notes = "",
                            RegistrationDataId = "12345678912351",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(1205)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(1209),
                            Habit = "التدخين",
                            Notes = "",
                            RegistrationDataId = "12345678912352",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(1211)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(1214),
                            Habit = "شرب الخمور",
                            Notes = "",
                            RegistrationDataId = "12345678912353",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(1216)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.BloodDonation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DonationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("BloodDonations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(659),
                            DonationDateTime = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(653),
                            MedicalTeamId = "12345678912348",
                            RegistrationDataId = "12345678912351",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(661)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(667),
                            DonationDateTime = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(664),
                            MedicalTeamId = "12345678912348",
                            RegistrationDataId = "12345678912352",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(669)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ICDId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ICDId");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId", "ICDId")
                        .IsUnique()
                        .HasFilter("[RegistrationDataId] IS NOT NULL AND [ICDId] IS NOT NULL");

                    b.ToTable("ChronicDiseases");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDiseaseDrug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChronicDiseaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.HasIndex("ChronicDiseaseId", "MedicationId")
                        .IsUnique();

                    b.ToTable("ChronicDiseaseDrugs");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Contraindication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contraindications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsChronic")
                        .HasColumnType("bit");

                    b.Property<string>("ItsEffect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("Contraindications");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Governorates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 1, 699, DateTimeKind.Local).AddTicks(4385),
                            Title = "القاهرة",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 1, 699, DateTimeKind.Local).AddTicks(4447)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 1, 699, DateTimeKind.Local).AddTicks(4453),
                            Title = "الجيزة",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 1, 699, DateTimeKind.Local).AddTicks(4455)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 1, 699, DateTimeKind.Local).AddTicks(4457),
                            Title = "مطروح",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 1, 699, DateTimeKind.Local).AddTicks(4459)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 1, 699, DateTimeKind.Local).AddTicks(4461),
                            Title = "شمال سيناء",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 1, 699, DateTimeKind.Local).AddTicks(4463)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 1, 699, DateTimeKind.Local).AddTicks(4465),
                            Title = "الشرقية",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 1, 699, DateTimeKind.Local).AddTicks(4466)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 1, 699, DateTimeKind.Local).AddTicks(4468),
                            Title = "الدقهلية",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 1, 699, DateTimeKind.Local).AddTicks(4470)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.HealthFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubordinateTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("MedicalTeamId");

                    b.ToTable("HealthFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Address1",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(6661),
                            Description = "Description1",
                            Email = "m@gmail.com",
                            GovernorateId = 1,
                            MedicalTeamId = "12345678912342",
                            Phone1 = "01123456878",
                            Phone2 = "",
                            Phone3 = "",
                            SubordinateTo = "المؤسسة العسكرية",
                            Title = "المستشفى العسكري بالشرقية",
                            Type = "مستشفى عسكري",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(6741)
                        },
                        new
                        {
                            Id = 2,
                            Address = "Address2",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(6750),
                            Description = "Description2",
                            Email = "a@gmail.com",
                            GovernorateId = 1,
                            MedicalTeamId = "12345678912348",
                            Phone1 = "01122456878",
                            Phone2 = "",
                            Phone3 = "",
                            SubordinateTo = "وزارة الصحة",
                            Title = "المستشفى العام بالعريش",
                            Type = "مستشفى عام",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(6752)
                        },
                        new
                        {
                            Id = 3,
                            Address = "Address3",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(6756),
                            Description = "Description3",
                            Email = "j@gmail.com",
                            GovernorateId = 1,
                            MedicalTeamId = "12345678912349",
                            Phone1 = "01123416878",
                            Phone2 = "",
                            Phone3 = "",
                            SubordinateTo = "مستشفيات الجامعة",
                            Title = "مستشفى الجامعة بالزقازيق",
                            Type = "مستشفى جامعي",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(6758)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ICD", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiagnosisName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Code");

                    b.ToTable("ICDs");

                    b.HasData(
                        new
                        {
                            Code = "A00.0",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(7212),
                            DiagnosisName = "Cholera due to Vibrio cholerae 01, biovar cholerae",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(7216)
                        },
                        new
                        {
                            Code = "A00.1",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(7221),
                            DiagnosisName = "Cholera due to Vibrio cholerae 01, biovar eltor",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(7223)
                        },
                        new
                        {
                            Code = "A00.9",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(7225),
                            DiagnosisName = "Cholera, unspecified",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(7228)
                        },
                        new
                        {
                            Code = "A01.00",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(7230),
                            DiagnosisName = "Typhoid fever, unspecified",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(7232)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.MedicalFacilityTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("HealthFacilityId", "MedicalTeamId")
                        .IsUnique()
                        .HasFilter("[MedicalTeamId] IS NOT NULL");

                    b.ToTable("MedicalFacilityTeams");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contraindication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Medications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contraindication = "ممنوع على مرضى الكلى والكبد",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(125),
                            Description = "أقراص",
                            ImageUrl = "/files/Medication/fexofenadine.jpg",
                            Name = "Fexofenadine (الفيكسوفينادين)",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(130)
                        },
                        new
                        {
                            Id = 2,
                            Contraindication = "لا يستخدم مع مرضى السكري.....الخ",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(135),
                            Description = "بخاخ أنف",
                            ImageUrl = "/files/Medication/NASONEX.jpg",
                            Name = "Nasonex (نازونكس)",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(137)
                        },
                        new
                        {
                            Id = 3,
                            Contraindication = "لا تستخدم مع أي منتجات أخرى تحتوي على الباراسيتامول. يزيد مرض الكبد الأساسي من خطر تلف الكبد المرتبط بالباراسيتامول. يجب على المرضى الذين تم تشخيص إصابتهم بضعف في الكبد أو الكلى طلب المشورة الطبية قبل تناول هذا الدواء.",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(140),
                            Description = "أقراص",
                            ImageUrl = "/files/Medication/advance.jpg",
                            Name = "Panadol Advance (بانادول أدفانس)",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(142)
                        },
                        new
                        {
                            Id = 4,
                            Contraindication = "فرط الحساسية لأي من المكونات",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(145),
                            Description = "أقراص",
                            ImageUrl = "/files/Medication/Kerovit.jpg",
                            Name = "Kerovit (كيروفيت)",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(147)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.PhysicalTherapy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.ToTable("PhysicalTherapy");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.RadLabResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResultNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitRadLabTestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("VisitRadLabTestId");

                    b.ToTable("RadLabResult");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ReceiveBlood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitId")
                        .HasColumnType("int");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReceiveType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdmitId");

                    b.HasIndex("MedicalTeamId");

                    b.ToTable("ReceiveBloods");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Surgery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdmitId");

                    b.HasIndex("MedicalTeamId");

                    b.ToTable("Surgeries");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.SurgeryProgressNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SurgeryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("SurgeryId");

                    b.ToTable("SurgeryProgressNotes");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UserVaccination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VaccinationId")
                        .HasColumnType("int");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VaccinationId");

                    b.HasIndex("VisitId", "VaccinationId")
                        .IsUnique();

                    b.ToTable("UserVaccinations");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DNAImageResultUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MedicalData");

                    b.HasData(
                        new
                        {
                            Id = "12345678912351",
                            BloodGroup = "A+",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(8923),
                            DNAImageResultUrl = "",
                            FamilyHistory = "الجد من الأب كان مصاب بالسكري",
                            MedicalHistory = "",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(8927)
                        },
                        new
                        {
                            Id = "12345678912352",
                            BloodGroup = "O+",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(8931),
                            DNAImageResultUrl = "",
                            FamilyHistory = "الجد من الأب كان مصاب بمرض ذهني",
                            MedicalHistory = "المريض أصيب بحالة من الهلوسة مرتين سابقا",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(8933)
                        },
                        new
                        {
                            Id = "12345678912353",
                            BloodGroup = "AB+",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(8939),
                            DNAImageResultUrl = "",
                            FamilyHistory = "",
                            MedicalHistory = "",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(8940)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalTeam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalSpecialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MedicalTeam");

                    b.HasData(
                        new
                        {
                            Id = "12345678912342",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(9500),
                            Degree = "ماجستير جراحة العمود الفقري",
                            MedicalSpecialization = "جراحة العمود الفقري",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(9506)
                        },
                        new
                        {
                            Id = "12345678912348",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(9510),
                            Degree = "ماجستير أورام العظام",
                            MedicalSpecialization = "أورام العظام",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(9512)
                        },
                        new
                        {
                            Id = "12345678912349",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(9515),
                            Degree = "دكتوراة أورام المسالك البولية",
                            MedicalSpecialization = "أورام المسالك البولية",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(9517)
                        },
                        new
                        {
                            Id = "12345678912350",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(9520),
                            Degree = "دكتوراة جراحة القلب",
                            MedicalSpecialization = "جراحة القلب",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(9522)
                        },
                        new
                        {
                            Id = "12345678912343",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(9524),
                            Degree = "ماجستير أنف وأذن وحنجرة",
                            MedicalSpecialization = "أنف وأذن وحنجرة",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(9526)
                        },
                        new
                        {
                            Id = "12345678912344",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(9529),
                            Degree = "بكالوريوس الصيدلة",
                            MedicalSpecialization = "طب الصيدلة",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(9531)
                        },
                        new
                        {
                            Id = "12345678912346",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(9534),
                            Degree = "معهد فني صحي",
                            MedicalSpecialization = "فني أشعة",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(9536)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.PersonalData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgeGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmergencyPhone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyPhone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<int>("NumOfChildren")
                        .HasColumnType("int");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.ToTable("PersonalData");

                    b.HasData(
                        new
                        {
                            Id = "12345678912351",
                            Address = "",
                            AgeGroup = "",
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(8326),
                            EmergencyPhone1 = "01234546788",
                            EmergencyPhone2 = "",
                            Gender = "ذكر",
                            GovernorateId = 1,
                            NumOfChildren = 3,
                            Occupation = "مدرس",
                            Phone1 = "01234546787",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(8330),
                            UserImageUrl = ""
                        },
                        new
                        {
                            Id = "12345678912352",
                            Address = "",
                            AgeGroup = "",
                            BirthDate = new DateTime(1960, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(8347),
                            EmergencyPhone1 = "01234746788",
                            EmergencyPhone2 = "",
                            Gender = "ذكر",
                            GovernorateId = 3,
                            NumOfChildren = 1,
                            Occupation = "دكتور جامعي",
                            Phone1 = "01234544487",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(8350),
                            UserImageUrl = ""
                        },
                        new
                        {
                            Id = "12345678912353",
                            Address = "",
                            AgeGroup = "",
                            BirthDate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(8360),
                            EmergencyPhone1 = "01234506788",
                            EmergencyPhone2 = "",
                            Gender = "ذكر",
                            GovernorateId = 2,
                            NumOfChildren = 3,
                            Occupation = "عمل حر",
                            Phone1 = "01234500787",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(8362),
                            UserImageUrl = ""
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.RegistrationData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmEmailCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ForgotPasswordCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "12345678912341",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f10885f-5f46-4b9f-8d31-8d7b939baa6b",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "k@gmail.com",
                            EmailConfirmed = true,
                            FullName = "أحمد محمد كمال",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "K@GMAIL.COM",
                            NormalizedUserName = "@KAMAL123",
                            PasswordHash = "AQAAAAIAAYagAAAAEPr+4d+KkFtDgKdBfi88gnvqC2bHO4iU5G4NwpL3EeGZDrPem8YjgJPZzF5EeDaOZg==",
                            PhoneNumber = "01234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4b92969d-e0a2-456c-bec6-d85570fee1fb",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Kamal123"
                        },
                        new
                        {
                            Id = "12345678912342",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "362daa26-8655-41ba-a132-2956804cf7d9",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "A@gmail.com",
                            EmailConfirmed = true,
                            FullName = "أحمد محمد أحمد",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "A@GMAIL.COM",
                            NormalizedUserName = "@AHMED123",
                            PasswordHash = "AQAAAAIAAYagAAAAEBXlMrZogv4BFV6Gax4tu5eyMq5uAGCWEhF6Rdseq0eQgfTkal+Vn4h0c9B90ec5Dg==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc7cd52f-e5d0-4a0d-b373-0a57a009afcf",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Ahmed123"
                        },
                        new
                        {
                            Id = "12345678912343",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd0728d8-8407-44f2-bc91-dfc58e163276",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "M@gmail.com",
                            EmailConfirmed = true,
                            FullName = "أحمد محمد محمد",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "M@GMAIL.COM",
                            NormalizedUserName = "@MUHAMMAD123",
                            PasswordHash = "AQAAAAIAAYagAAAAENINGdlYWv0lDQ3MjDZBJrueHR/gOmp6Utk3oCatZ/URTJbZjijwgTbFPlda8REaBw==",
                            PhoneNumber = "01234567899",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f92a40e-9599-4eb1-977b-81a2eae30760",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Muhammad123"
                        },
                        new
                        {
                            Id = "12345678912344",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9530ae2-7434-4dc9-a187-a7b22b6aaff4",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Al@gmail.com",
                            EmailConfirmed = true,
                            FullName = "أحمد محمد علي",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "AL@GMAIL.COM",
                            NormalizedUserName = "@ALI123",
                            PasswordHash = "AQAAAAIAAYagAAAAEObTXVd9kHL/ShT2ikPwwbb4ZsHu01Eq8iC1XmWjh2g0FgUU3AtpwaoxZz+e5sm+WA==",
                            PhoneNumber = "01234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "803f243c-5c34-45c3-a04a-87221125e824",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Ali123"
                        },
                        new
                        {
                            Id = "12345678912346",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08cfe263-4672-4fdc-8ddd-a63da79072f1",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ka@gmail.com",
                            EmailConfirmed = true,
                            FullName = "أحمد خاطر علي",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "KA@GMAIL.COM",
                            NormalizedUserName = "@KHATER123",
                            PasswordHash = "AQAAAAIAAYagAAAAEM+1jN1mTrdXuyjA4VMtFpdXvHBPAvbWNUD8X3CQ1fmI9yGLysuf7szqAm3k3XRDaQ==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e47d8f6-ba1d-4c28-bee6-8c561a43679d",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Khater123"
                        },
                        new
                        {
                            Id = "12345678912348",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3fea843-a43b-49c3-bb43-8109cba05fed",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ma2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "منال خاطر أحمد",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "MA2@GMAIL.COM",
                            NormalizedUserName = "@MANAL2123",
                            PasswordHash = "AQAAAAIAAYagAAAAEPaff1zON+XI6isH8UUGh7PkKNuziAktYLRCfksfkzYLaEw2yhYAb/GB6Nzs8ECTTg==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f76d22cd-b97c-4794-b350-0bc13311d6f9",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Manal2123"
                        },
                        new
                        {
                            Id = "12345678912349",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "587a9f64-06b1-40a6-b723-1063468cff26",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ka2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "خاطر أحمد",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "KA2@GMAIL.COM",
                            NormalizedUserName = "@KHATER2123",
                            PasswordHash = "AQAAAAIAAYagAAAAEGlKLRXyYBz8EcQoBMNNn0celunK65nJh8u9Gnc8XWoHCJPPL0y+q5AoMpufoPPlMA==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bcbf5e10-d221-48af-b948-889b666de0f7",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Khater2123"
                        },
                        new
                        {
                            Id = "12345678912350",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1f13a31-bd31-4393-97ae-83ce5448a951",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "TE@gmail.com",
                            EmailConfirmed = true,
                            FullName = "test",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "TE@GMAIL.COM",
                            NormalizedUserName = "@TEST2123",
                            PasswordHash = "AQAAAAIAAYagAAAAEBjJ3KXQEH1ZV8mo7sorR1lsIeMGvPP+sPAf/ITe7gxjVFqz+nlogBdlWIax1PB0+A==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3921929e-6993-4f58-8ec9-88e6e997d3f7",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Test2123"
                        },
                        new
                        {
                            Id = "12345678912351",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff6d935d-9419-4eb5-a26a-05c2aa5a558f",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Fa@gmail.com",
                            EmailConfirmed = true,
                            FullName = "أحمد فوزي محمد",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "FA@GMAIL.COM",
                            NormalizedUserName = "@FAWZY123",
                            PasswordHash = "AQAAAAIAAYagAAAAEOZTDOWBWRAZ4eVIANKRmHSwIKI71PoU6eX0d+Yjj9QUUPKiWyWFZ14oAGJ24ITJsg==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63ea4267-2758-416e-8fb1-a6912a0a2d23",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Fawzy123"
                        },
                        new
                        {
                            Id = "12345678912352",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "24dfed95-da30-476a-aa10-e76d6018e4f8",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AlFa@gmail.com",
                            EmailConfirmed = true,
                            FullName = "علي فوزي محمد",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "ALFA@GMAIL.COM",
                            NormalizedUserName = "@ALIFAWZY123",
                            PasswordHash = "AQAAAAIAAYagAAAAELLcFa9hNG3L3blV+qUS8pi6gfaL5N+JY0acRplxJn8dvokPUym39wyrAj6TBmke9w==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a301762-27c0-4d62-b917-68078f79e9f0",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@AliFawzy123"
                        },
                        new
                        {
                            Id = "12345678912353",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6cd483f4-1d29-4c2f-b943-61bd9b6f98b4",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AFa@gmail.com",
                            EmailConfirmed = true,
                            FullName = "علي فوزي أحمد",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "AFA@GMAIL.COM",
                            NormalizedUserName = "@AFAWZY123",
                            PasswordHash = "AQAAAAIAAYagAAAAEBEeBJZnGml8l+RRpfdRm1+LXQ/ND7BnzACZmv9wHjwS/rrcWOcPL3nyNeBK+Ikfrg==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6e521bc-e063-4479-854c-8ce871d34036",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@AFawzy123"
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.UserInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsuranceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceOrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("UserInsurances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(7730),
                            InsuranceNo = "123OP",
                            InsuranceOrganizationName = "التأمين الصحي المصري",
                            InsuranceType = "حكومي",
                            RegistrationDataId = "12345678912351",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(7734)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(7738),
                            InsuranceNo = "124OP",
                            InsuranceOrganizationName = "التأمين الصحي المصري",
                            InsuranceType = "حكومي",
                            RegistrationDataId = "12345678912352",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 786, DateTimeKind.Local).AddTicks(7740)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Vaccination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgeRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contraindication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SideEffects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VaccinationEffectiveness")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vaccinations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeRange = "2-64 عام",
                            Contraindication = "",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(3152),
                            Dosage = "1 dose",
                            Name = "Vaxchora",
                            Note = "",
                            Reason = "لقاح يستخدم للوقاية من الكوليرا",
                            Route = "عن طريق الفم",
                            SideEffects = "",
                            Type = "حبوب",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(3155),
                            VaccinationEffectiveness = "3-6 أشهر"
                        },
                        new
                        {
                            Id = 2,
                            AgeRange = "من عامين وأكبر",
                            Contraindication = "",
                            CreatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(3161),
                            Dosage = "2 doses, given 1–6 weeks apart ",
                            Name = "Dukoral",
                            Note = "Children aged 2–5 years need 3 doses, given 1 to 6 weeks apart",
                            Reason = "لقاح يستخدم للوقاية من الكوليرا",
                            Route = "عن طريق الفم",
                            SideEffects = "",
                            Type = "حبوب",
                            UpdatedAt = new DateTime(2023, 6, 2, 17, 25, 2, 787, DateTimeKind.Local).AddTicks(3163),
                            VaccinationEffectiveness = "عامين"
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("ICDId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InstructionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReportImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("ICDId");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitMedication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DosageNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<string>("NoOfDays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.HasIndex("MedicationId", "VisitId")
                        .IsUnique();

                    b.ToTable("VisitMedications");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitRadLabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitRadLabTests");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitVitalSign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitVitalSigns");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "SystemManager",
                            NormalizedName = "SYSTEMMANAGER"
                        },
                        new
                        {
                            Id = "2",
                            Name = "HealthFacilityManager",
                            NormalizedName = "HEALTHFACILITYAMANAGER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Physician",
                            NormalizedName = "PHYSICIAN"
                        },
                        new
                        {
                            Id = "5",
                            Name = "Pharmacist",
                            NormalizedName = "PHARMACIST"
                        },
                        new
                        {
                            Id = "6",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = "7",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "12345678912341",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "12345678912342",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12345678912348",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12345678912349",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12345678912350",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12345678912343",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "12345678912344",
                            RoleId = "5"
                        },
                        new
                        {
                            UserId = "12345678912351",
                            RoleId = "6"
                        },
                        new
                        {
                            UserId = "12345678912352",
                            RoleId = "6"
                        },
                        new
                        {
                            UserId = "12345678912353",
                            RoleId = "6"
                        },
                        new
                        {
                            UserId = "12345678912346",
                            RoleId = "7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Admit", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany("Admits")
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("Admits")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("HealthFacility");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.AdmitProgressNote", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Admit", "Admit")
                        .WithMany("AdmitProgressNotes")
                        .HasForeignKey("AdmitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.Navigation("Admit");

                    b.Navigation("MedicalTeam");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Allergy", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany("Allergies")
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("Allergies")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.AllergyDrug", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Allergy", "Allergy")
                        .WithMany("AllergyDrugs")
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.Medication", "Medication")
                        .WithMany("AllergyDrugs")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergy");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.BadHabit", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("BadHabits")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.BloodDonation", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("BloodDonations")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDisease", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.ICD", "ICD")
                        .WithMany("ChronicDiseases")
                        .HasForeignKey("ICDId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("ChronicDiseases")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("ICD");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDiseaseDrug", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.ChronicDisease", "ChronicDisease")
                        .WithMany("ChronicDiseaseDrugs")
                        .HasForeignKey("ChronicDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.Medication", "Medication")
                        .WithMany("ChronicDiseaseDrugs")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChronicDisease");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Contraindication", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("Contraindications")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.HealthFacility", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Governorate", "Governorate")
                        .WithMany("HealthFacilitys")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany("HealthFacilities")
                        .HasForeignKey("MedicalTeamId");

                    b.Navigation("Governorate");

                    b.Navigation("MedicalTeam");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.MedicalFacilityTeam", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.HealthFacility", "HealthFacility")
                        .WithMany("MedicalFacilityTeams")
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany("MedicalFacilityTeams")
                        .HasForeignKey("MedicalTeamId");

                    b.Navigation("HealthFacility");

                    b.Navigation("MedicalTeam");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.PhysicalTherapy", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("PhysicalTherapies")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.RadLabResult", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.VisitRadLabTest", "VisitRadLabTest")
                        .WithMany("VisitRadLabResults")
                        .HasForeignKey("VisitRadLabTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthFacility");

                    b.Navigation("MedicalTeam");

                    b.Navigation("VisitRadLabTest");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ReceiveBlood", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Admit", "Admit")
                        .WithMany("ReceiveBloods")
                        .HasForeignKey("AdmitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.Navigation("Admit");

                    b.Navigation("MedicalTeam");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Surgery", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Admit", "Admit")
                        .WithMany("Surgeries")
                        .HasForeignKey("AdmitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.Navigation("Admit");

                    b.Navigation("MedicalTeam");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.SurgeryProgressNote", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.Surgery", "Surgery")
                        .WithMany("SurgeryProgressNotes")
                        .HasForeignKey("SurgeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalTeam");

                    b.Navigation("Surgery");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UserVaccination", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Vaccination", "Vaccination")
                        .WithMany()
                        .HasForeignKey("VaccinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("UserVaccinations")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vaccination");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalData", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithOne("MedicalData")
                        .HasForeignKey("EHR_API.Entities.Models.UsersData.MedicalData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalTeam", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithOne("MedicalTeam")
                        .HasForeignKey("EHR_API.Entities.Models.UsersData.MedicalTeam", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.PersonalData", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Governorate", "Governorate")
                        .WithMany("PersonalData")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithOne("PersonalData")
                        .HasForeignKey("EHR_API.Entities.Models.UsersData.PersonalData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.UserInsurance", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("UserInsurances")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Visit", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.HealthFacility", "HealthFacility")
                        .WithMany("Visits")
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.ICD", "ICD")
                        .WithMany("Visits")
                        .HasForeignKey("ICDId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany("Visits")
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("Visits")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("HealthFacility");

                    b.Navigation("ICD");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitMedication", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Medication", "Medication")
                        .WithMany("VisitMedications")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("VisitMedications")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitRadLabTest", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("VisitRadLabTests")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitVitalSign", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("VisitVitalSigns")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Admit", b =>
                {
                    b.Navigation("AdmitProgressNotes");

                    b.Navigation("ReceiveBloods");

                    b.Navigation("Surgeries");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Allergy", b =>
                {
                    b.Navigation("AllergyDrugs");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDisease", b =>
                {
                    b.Navigation("ChronicDiseaseDrugs");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Governorate", b =>
                {
                    b.Navigation("HealthFacilitys");

                    b.Navigation("PersonalData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.HealthFacility", b =>
                {
                    b.Navigation("MedicalFacilityTeams");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ICD", b =>
                {
                    b.Navigation("ChronicDiseases");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Medication", b =>
                {
                    b.Navigation("AllergyDrugs");

                    b.Navigation("ChronicDiseaseDrugs");

                    b.Navigation("VisitMedications");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Surgery", b =>
                {
                    b.Navigation("SurgeryProgressNotes");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalTeam", b =>
                {
                    b.Navigation("Admits");

                    b.Navigation("Allergies");

                    b.Navigation("HealthFacilities");

                    b.Navigation("MedicalFacilityTeams");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.RegistrationData", b =>
                {
                    b.Navigation("Admits");

                    b.Navigation("Allergies");

                    b.Navigation("BadHabits");

                    b.Navigation("BloodDonations");

                    b.Navigation("ChronicDiseases");

                    b.Navigation("Contraindications");

                    b.Navigation("MedicalData");

                    b.Navigation("MedicalTeam");

                    b.Navigation("PersonalData");

                    b.Navigation("UserInsurances");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Visit", b =>
                {
                    b.Navigation("PhysicalTherapies");

                    b.Navigation("UserVaccinations");

                    b.Navigation("VisitMedications");

                    b.Navigation("VisitRadLabTests");

                    b.Navigation("VisitVitalSigns");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitRadLabTest", b =>
                {
                    b.Navigation("VisitRadLabResults");
                });
#pragma warning restore 612, 618
        }
    }
}
