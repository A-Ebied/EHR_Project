// <auto-generated />
using System;
using EHR_API.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EHRAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230604133700_db2")]
    partial class db2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EHR_API.Entities.Models.Admit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AdmitAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LeaveAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("Admits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.AdmitProgressNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdmitId");

                    b.HasIndex("MedicalTeamId");

                    b.ToTable("AdmitProgressNote");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsChronic")
                        .HasColumnType("bit");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Reaction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("Allergies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Allergen = "Dust mites, Pollen, Pet hair, fur, feathers",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(5223),
                            Instruction = "Avoid allergens",
                            IsChronic = true,
                            MedicalTeamId = "12345678912343",
                            Reaction = "Sneezing ,Runny or stuffy nose, coughing, tightness in the chest, shortness of breath",
                            RegistrationDataId = "12345678912351",
                            Type = "Dust allergy",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(5228)
                        },
                        new
                        {
                            Id = 2,
                            Allergen = "Peanuts, Milk, Eggs",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(5234),
                            Instruction = "",
                            IsChronic = true,
                            MedicalTeamId = "12345678912350",
                            Reaction = "Rash",
                            RegistrationDataId = "12345678912352",
                            Type = "Food Allergy",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(5236)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.AllergyDrug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AllergyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.HasIndex("AllergyId", "MedicationId")
                        .IsUnique();

                    b.ToTable("AllergyDrugs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllergyId = 1,
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(5821),
                            MedicationId = 1,
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(5827)
                        },
                        new
                        {
                            Id = 2,
                            AllergyId = 1,
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(5832),
                            MedicationId = 2,
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(5835)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.BadHabit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Habit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("BadHabits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(4657),
                            Habit = "Smoking",
                            Notes = "",
                            RegistrationDataId = "12345678912351",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(4661)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(4666),
                            Habit = "Smoking",
                            Notes = "",
                            RegistrationDataId = "12345678912352",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(4669)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(4673),
                            Habit = "Drink Wine",
                            Notes = "",
                            RegistrationDataId = "12345678912353",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(4676)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.BloodDonation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DonationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("BloodDonations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(4097),
                            DonationDateTime = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(4089),
                            MedicalTeamId = "12345678912348",
                            RegistrationDataId = "12345678912351",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(4100)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(4107),
                            DonationDateTime = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(4104),
                            MedicalTeamId = "12345678912348",
                            RegistrationDataId = "12345678912352",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(4110)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ICDId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ICDId");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId", "ICDId")
                        .IsUnique()
                        .HasFilter("[RegistrationDataId] IS NOT NULL AND [ICDId] IS NOT NULL");

                    b.ToTable("ChronicDiseases");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDiseaseDrug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChronicDiseaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.HasIndex("ChronicDiseaseId", "MedicationId")
                        .IsUnique();

                    b.ToTable("ChronicDiseaseDrugs");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Contraindication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contraindications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsChronic")
                        .HasColumnType("bit");

                    b.Property<string>("ItsEffect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("Contraindications");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Governorates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 4, 16, 36, 58, 970, DateTimeKind.Local).AddTicks(8425),
                            Title = "Cairo",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 36, 58, 970, DateTimeKind.Local).AddTicks(8486)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 4, 16, 36, 58, 970, DateTimeKind.Local).AddTicks(8490),
                            Title = "Giza",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 36, 58, 970, DateTimeKind.Local).AddTicks(8492)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 4, 16, 36, 58, 970, DateTimeKind.Local).AddTicks(8493),
                            Title = "Matrouh",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 36, 58, 970, DateTimeKind.Local).AddTicks(8495)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 4, 16, 36, 58, 970, DateTimeKind.Local).AddTicks(8497),
                            Title = "North Sinai",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 36, 58, 970, DateTimeKind.Local).AddTicks(8498)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 4, 16, 36, 58, 970, DateTimeKind.Local).AddTicks(8500),
                            Title = "Sharkia",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 36, 58, 970, DateTimeKind.Local).AddTicks(8501)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 4, 16, 36, 58, 970, DateTimeKind.Local).AddTicks(8503),
                            Title = "Dakahlia",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 36, 58, 970, DateTimeKind.Local).AddTicks(8505)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.HealthFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubordinateTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("MedicalTeamId");

                    b.ToTable("HealthFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Address1",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 33, DateTimeKind.Local).AddTicks(9196),
                            Description = "Description1",
                            Email = "m@gmail.com",
                            GovernorateId = 1,
                            MedicalTeamId = "12345678912342",
                            Phone1 = "01123456878",
                            Phone2 = "",
                            Phone3 = "",
                            SubordinateTo = "The military Establishment",
                            Title = "Sharkia Military Hospital",
                            Type = "Military Hospital",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 33, DateTimeKind.Local).AddTicks(9445)
                        },
                        new
                        {
                            Id = 2,
                            Address = "Address2",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 33, DateTimeKind.Local).AddTicks(9456),
                            Description = "Description2",
                            Email = "a@gmail.com",
                            GovernorateId = 1,
                            MedicalTeamId = "12345678912348",
                            Phone1 = "01122456878",
                            Phone2 = "",
                            Phone3 = "",
                            SubordinateTo = "Ministry of Health",
                            Title = "Arish Hospital",
                            Type = "Government Hospital",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 33, DateTimeKind.Local).AddTicks(9459)
                        },
                        new
                        {
                            Id = 3,
                            Address = "Address3",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 33, DateTimeKind.Local).AddTicks(9464),
                            Description = "Description3",
                            Email = "j@gmail.com",
                            GovernorateId = 1,
                            MedicalTeamId = "12345678912349",
                            Phone1 = "01123416878",
                            Phone2 = "",
                            Phone3 = "",
                            SubordinateTo = "University Hospitals",
                            Title = "University Hospital, Zagazig",
                            Type = "University Hospital",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 33, DateTimeKind.Local).AddTicks(9467)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ICD", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiagnosisName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Code");

                    b.ToTable("ICDs");

                    b.HasData(
                        new
                        {
                            Code = "A00.0",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(44),
                            DiagnosisName = "Cholera due to Vibrio cholerae 01, biovar cholerae",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(51)
                        },
                        new
                        {
                            Code = "A00.1",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(56),
                            DiagnosisName = "Cholera due to Vibrio cholerae 01, biovar eltor",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(58)
                        },
                        new
                        {
                            Code = "A00.9",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(62),
                            DiagnosisName = "Cholera, unspecified",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(64)
                        },
                        new
                        {
                            Code = "A01.00",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(68),
                            DiagnosisName = "Typhoid fever, unspecified",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(71)
                        },
                        new
                        {
                            Code = "J18.9",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(74),
                            DiagnosisName = "Pneumonia",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(77)
                        },
                        new
                        {
                            Code = " I10",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(80),
                            DiagnosisName = "Essential (primary) hypertension",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(83)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.MedicalFacilityTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("HealthFacilityId", "MedicalTeamId")
                        .IsUnique()
                        .HasFilter("[MedicalTeamId] IS NOT NULL");

                    b.ToTable("MedicalFacilityTeams");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contraindication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Medications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contraindication = "Forbidden for patients with kidneys and liver.",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(3497),
                            Description = "Route, Oral",
                            ImageUrl = "/files/Medication/fexofenadine.jpg",
                            Name = "Fexofenadine",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(3503)
                        },
                        new
                        {
                            Id = 2,
                            Contraindication = "-",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(3508),
                            Description = "Nasal Spray",
                            ImageUrl = "/files/Medication/NASONEX.jpg",
                            Name = "Nasonex",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(3511)
                        },
                        new
                        {
                            Id = 3,
                            Contraindication = "Do not use with any other paracetamol containing products.",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(3515),
                            Description = "Route, Oral",
                            ImageUrl = "/files/Medication/advance.jpg",
                            Name = "Panadol Advance",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(3518)
                        },
                        new
                        {
                            Id = 4,
                            Contraindication = "-",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(3522),
                            Description = "Route, Oral",
                            ImageUrl = "/files/Medication/Kerovit.jpg",
                            Name = "Kerovit",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(3525)
                        },
                        new
                        {
                            Id = 5,
                            Contraindication = "Allergy to any of the components of the drug",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(3529),
                            Description = "Route, Oral",
                            ImageUrl = "/files/Medication/CiproCoupons.png",
                            Name = "Cipro",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(3531)
                        },
                        new
                        {
                            Id = 6,
                            Contraindication = "Allergy to any of the components of the drug",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(3535),
                            Description = "Route, Oral",
                            ImageUrl = "/files/Medication/Oracea.jpg",
                            Name = "Oracea",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(3538)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.PhysicalTherapy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.ToTable("PhysicalTherapy");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.RadLabResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResultNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitRadLabTestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("VisitRadLabTestId");

                    b.ToTable("RadLabResult");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ReceiveBlood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitId")
                        .HasColumnType("int");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReceiveType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdmitId");

                    b.HasIndex("MedicalTeamId");

                    b.ToTable("ReceiveBloods");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Surgery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdmitId");

                    b.HasIndex("MedicalTeamId");

                    b.ToTable("Surgeries");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.SurgeryProgressNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SurgeryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("SurgeryId");

                    b.ToTable("SurgeryProgressNotes");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UserVaccination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VaccinationId")
                        .HasColumnType("int");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VaccinationId");

                    b.HasIndex("VisitId", "VaccinationId")
                        .IsUnique();

                    b.ToTable("UserVaccinations");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DNAImageResultUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MedicalData");

                    b.HasData(
                        new
                        {
                            Id = "12345678912351",
                            BloodGroup = "A+",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(2279),
                            DNAImageResultUrl = "",
                            FamilyHistory = "Paternal grandfather had diabetes",
                            MedicalHistory = "",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(2285)
                        },
                        new
                        {
                            Id = "12345678912352",
                            BloodGroup = "O+",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(2307),
                            DNAImageResultUrl = "",
                            FamilyHistory = "The paternal grandfather had a mental illness.",
                            MedicalHistory = "The patient had hallucinations twice previously.",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(2310)
                        },
                        new
                        {
                            Id = "12345678912353",
                            BloodGroup = "AB+",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(2314),
                            DNAImageResultUrl = "",
                            FamilyHistory = "",
                            MedicalHistory = "",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(2316)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalTeam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalSpecialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MedicalTeam");

                    b.HasData(
                        new
                        {
                            Id = "12345678912342",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(2887),
                            Degree = "PhD in pulmonary diseases",
                            MedicalSpecialization = "Pulmonologist",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(2892)
                        },
                        new
                        {
                            Id = "12345678912348",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(2898),
                            Degree = "Master of Orthopedic Oncology",
                            MedicalSpecialization = "Orthopaedic Oncology Surgeon",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(2900)
                        },
                        new
                        {
                            Id = "12345678912349",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(2904),
                            Degree = "PhD in urological oncology",
                            MedicalSpecialization = "Urologic Oncologist",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(2906)
                        },
                        new
                        {
                            Id = "12345678912350",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(2910),
                            Degree = "PhD in Internal medicine",
                            MedicalSpecialization = "Internal medicine physician",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(2912)
                        },
                        new
                        {
                            Id = "12345678912343",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(2916),
                            Degree = "Master of Otolaryngology",
                            MedicalSpecialization = "Otolaryngology",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(2918)
                        },
                        new
                        {
                            Id = "12345678912344",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(2923),
                            Degree = "Bachelor's degree in pharmacy",
                            MedicalSpecialization = "Pharmacist",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(2925)
                        },
                        new
                        {
                            Id = "12345678912346",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(2929),
                            Degree = "Institute of Technical healthy",
                            MedicalSpecialization = "Radiology technician",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(2931)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.PersonalData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgeGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmergencyPhone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyPhone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<int>("NumOfChildren")
                        .HasColumnType("int");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.ToTable("PersonalData");

                    b.HasData(
                        new
                        {
                            Id = "12345678912351",
                            Address = "",
                            AgeGroup = "",
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(1648),
                            EmergencyPhone1 = "01234546788",
                            EmergencyPhone2 = "",
                            Gender = "Male",
                            GovernorateId = 1,
                            NumOfChildren = 3,
                            Occupation = "Teacher",
                            Phone1 = "01234546787",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(1654),
                            UserImageUrl = ""
                        },
                        new
                        {
                            Id = "12345678912352",
                            Address = "",
                            AgeGroup = "",
                            BirthDate = new DateTime(1960, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(1675),
                            EmergencyPhone1 = "01234746788",
                            EmergencyPhone2 = "",
                            Gender = "Male",
                            GovernorateId = 3,
                            NumOfChildren = 1,
                            Occupation = "Professor",
                            Phone1 = "01234544487",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(1678),
                            UserImageUrl = ""
                        },
                        new
                        {
                            Id = "12345678912353",
                            Address = "",
                            AgeGroup = "",
                            BirthDate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(1691),
                            EmergencyPhone1 = "01234506788",
                            EmergencyPhone2 = "",
                            Gender = "Male",
                            GovernorateId = 2,
                            NumOfChildren = 3,
                            Occupation = "",
                            Phone1 = "01234500787",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(1693),
                            UserImageUrl = ""
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.RegistrationData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmEmailCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ForgotPasswordCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "12345678912341",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8169d9d-9bd7-479b-92c7-664d6dd956e6",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "k@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ahmed Mohamed Kamal",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "K@GMAIL.COM",
                            NormalizedUserName = "@KAMAL123",
                            PasswordHash = "AQAAAAIAAYagAAAAEMLyBZJv66TQfYy0HhXTUdDuVWhV1P7Okb9mKnzo7RIr4/kbZt0o6PM3VP4QOs429Q==",
                            PhoneNumber = "01234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "082df6b0-4c64-4c46-9806-17955645d632",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Kamal123"
                        },
                        new
                        {
                            Id = "12345678912342",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0c60647-aa4b-435d-877e-61bb6bc0c424",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "muha75375@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ahmed Mohamed Ahmed",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "MUHA75375@GMAIL.COM",
                            NormalizedUserName = "@AHMED123",
                            PasswordHash = "AQAAAAIAAYagAAAAEL/SmuWRW9KVfhHuutVpw6BZK6hqPPlH6MahUTrrcjHv7MiWMLV+Od+HOpuHT5amxA==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a7a0b524-e12a-4584-acd2-71ed189d2424",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Ahmed123"
                        },
                        new
                        {
                            Id = "12345678912343",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "12b210d2-d36c-4a4d-bdef-9a8723513157",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "M@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ahmed Mohamed Mohamed",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "M@GMAIL.COM",
                            NormalizedUserName = "@MUHAMMAD123",
                            PasswordHash = "AQAAAAIAAYagAAAAEBmjH9wvawFTctRmSfnJKfA4Tt4F4LOmvCC95u9wOiUTSRiroQscIY7rIlajoiIQbQ==",
                            PhoneNumber = "01234567899",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c7758baf-b7c0-4f7d-94fa-b1ffb0600fa1",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Muhammad123"
                        },
                        new
                        {
                            Id = "12345678912344",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a89648c-a866-4456-89c1-31eb70a723ad",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Al@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ahmed Mohammed Ali",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "AL@GMAIL.COM",
                            NormalizedUserName = "@ALI123",
                            PasswordHash = "AQAAAAIAAYagAAAAEG7rTbtdL74FMYvLZDuUysWMMxwGVaNUU7We69NcoN5mIoTJptWdrIA9TmhDbvIaiQ==",
                            PhoneNumber = "01234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ba7a9920-311c-4246-bda8-a0cffad5656c",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Ali123"
                        },
                        new
                        {
                            Id = "12345678912346",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4885f49-6a12-4b6d-bb28-019908c29e99",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ka@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ahmed Khater Ali",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "KA@GMAIL.COM",
                            NormalizedUserName = "@KHATER123",
                            PasswordHash = "AQAAAAIAAYagAAAAEDOmtiWBtiOReaRLpwbW1/1mhipQqcpxvKO2OerD0vRvT1Xbc04a4qmahtltQFZFHA==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97ac2b6d-e3f9-48de-9ff8-700c71fcc6bb",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Khater123"
                        },
                        new
                        {
                            Id = "12345678912348",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "faa17e3a-12fd-4b86-bab0-df370aa1983a",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ma2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Manal Khater Ahmed",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "MA2@GMAIL.COM",
                            NormalizedUserName = "@MANAL2123",
                            PasswordHash = "AQAAAAIAAYagAAAAEGkSZ6XYGYLSWU3u1hhu56xlx3KB9j5XT/dCDPLpqGPiGLhW+BYWOxk/CM5z7K7YmA==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "06b7c045-a04b-430f-8480-e01f73f9dd25",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Manal2123"
                        },
                        new
                        {
                            Id = "12345678912349",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b0c3c1f-5f90-4e3f-9686-3d91ac28829e",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ka2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Khater Ahmed",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "KA2@GMAIL.COM",
                            NormalizedUserName = "@KHATER2123",
                            PasswordHash = "AQAAAAIAAYagAAAAEISYkd+m0QhzCHRp+iJxYQbGD065Y4nGNFwRKeomqkSEQXVXwKNcZlmOjfNWPh03hw==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1e411d9-b787-4d49-b542-a0797acbb66f",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Khater2123"
                        },
                        new
                        {
                            Id = "12345678912350",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5bbe502f-b956-462d-81c3-a63d30b43d7a",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "TE@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ali Khater Ahmed",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "TE@GMAIL.COM",
                            NormalizedUserName = "@TEST2123",
                            PasswordHash = "AQAAAAIAAYagAAAAEADD6xKCV12SJUgmARDwNgEABIrfhbuUEG18N+8fTGvkVIZmfPHHnO+0iMqKsF4K6Q==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ae15b6c-bea3-4445-9d1e-eee479329e41",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@AlI2123"
                        },
                        new
                        {
                            Id = "12345678912351",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "84f2f0a4-7ede-4b57-aeb6-3e95e2db7c7a",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Fa@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ahmed Fawzy Mohamed",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "FA@GMAIL.COM",
                            NormalizedUserName = "@FAWZY123",
                            PasswordHash = "AQAAAAIAAYagAAAAELoRGo4fFNDeQCXNcBnJZryUmSGgT+hzjZJFRh5LIhXG8OLBfV/htLlQcn0RyBwMUw==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c630bb76-045c-45d4-9472-216cd3d6cbac",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Fawzy123"
                        },
                        new
                        {
                            Id = "12345678912352",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ba70615-b474-4189-abc6-ff5b7cf4dd3d",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AlFa@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ali Fawzy Muhammad",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "ALFA@GMAIL.COM",
                            NormalizedUserName = "@ALIFAWZY123",
                            PasswordHash = "AQAAAAIAAYagAAAAEBTDky2JuCDVDTp59MHyHp44tVO6vTgSjXguE7AqnAo/2kSeAMHOvuQFj70WjM/55g==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5deb1166-d681-4757-8eb8-175c173fd2db",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@AliFawzy123"
                        },
                        new
                        {
                            Id = "12345678912353",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "96ef6274-3f28-4446-8dea-933da972e25f",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AFa@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ali Fawzy Ahmed",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "AFA@GMAIL.COM",
                            NormalizedUserName = "@AFAWZY123",
                            PasswordHash = "AQAAAAIAAYagAAAAEN/KUhJNOfcV2sHnrXIxUyIbWEd126bwslvXrlmZiwq3aKyYMmB0RBHb4cBWLN3kKQ==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f3b9e93b-6c8f-4c1b-a1ec-c98721165140",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@AFawzy123"
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.UserInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsuranceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceOrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("UserInsurances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(881),
                            InsuranceNo = "123OP",
                            InsuranceOrganizationName = "Egyptian health insurance",
                            InsuranceType = "Governmental",
                            RegistrationDataId = "12345678912351",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(887)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(892),
                            InsuranceNo = "124OP",
                            InsuranceOrganizationName = "Egyptian health insurance",
                            InsuranceType = "Governmental",
                            RegistrationDataId = "12345678912352",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(895)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Vaccination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgeRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contraindication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SideEffects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VaccinationEffectiveness")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vaccinations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeRange = "Typically given in two doses during childhood",
                            Contraindication = "Severe allergic reaction to a previous dose or vaccine components",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(6397),
                            Dosage = "Two doses, usually administered at 12-15 months and 4-6 years of age",
                            Name = "Measles, Mumps, and Rubella (MMR)",
                            Note = "MMR vaccination is an important part of Egypt's immunization program.",
                            Reason = "Protection against measles, mumps, and rubella",
                            Route = "Subcutaneous injection",
                            SideEffects = "Mild side effects include fever, rash, and temporary joint pain",
                            Type = "Live attenuated vaccine",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(6402),
                            VaccinationEffectiveness = "Highly effective in preventing the target diseases"
                        },
                        new
                        {
                            Id = 2,
                            AgeRange = "Multiple doses given during infancy and childhood",
                            Contraindication = "Severe allergic reaction to a previous dose",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(6409),
                            Dosage = "Typically administered as a series of four doses",
                            Name = "Polio",
                            Note = "Polio vaccination is crucial for maintaining Egypt's polio-free status.",
                            Reason = "Protection against poliovirus infection",
                            Route = "Intramuscular injection or oral administration",
                            SideEffects = "Mild side effects include pain or swelling at the injection site",
                            Type = "Inactivated vaccine (inactivated polio vaccine or IPV)",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(6412),
                            VaccinationEffectiveness = "Highly effective in preventing polio"
                        },
                        new
                        {
                            Id = 3,
                            AgeRange = "Usually given during childhood or as a catch-up vaccine for older individuals",
                            Contraindication = "Allergy to vaccine components",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(6418),
                            Dosage = "Typically administered as a series of two doses",
                            Name = "Hepatitis A",
                            Note = "Hepatitis A vaccination is recommended for individuals traveling to areas with a high prevalence of the disease.",
                            Reason = "Protection against hepatitis A virus infection",
                            Route = "Intramuscular injection",
                            SideEffects = "Mild side effects include pain at the injection site, headache, and fatigue",
                            Type = "Inactivated vaccine",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(6421),
                            VaccinationEffectiveness = "Highly effective in preventing hepatitis A"
                        },
                        new
                        {
                            Id = 4,
                            AgeRange = "Recommended for individuals six months of age and older",
                            Contraindication = "Severe allergic reaction to a previous dose or vaccine components",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(6426),
                            Dosage = "Annual vaccination, as the flu strains change every year",
                            Name = "Influenza (Flu)",
                            Note = "Annual influenza vaccination is recommended, especially for high-risk groups.",
                            Reason = "Protection against seasonal influenza viruses",
                            Route = "Intramuscular injection or nasal spray",
                            SideEffects = "Mild side effects include soreness at the injection site, low-grade fever, and muscle aches",
                            Type = "Inactivated vaccine (influenza vaccine)",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(6429),
                            VaccinationEffectiveness = "Varies each year due to different strains, but overall effective in reducing the severity of flu symptoms"
                        },
                        new
                        {
                            Id = 5,
                            AgeRange = "It is recommended for infants and young children, as well as adults with certain medical conditions or risk factors. The specific age recommendations may vary by country.",
                            Contraindication = "Severe allergic reaction (anaphylaxis) to a previous dose of PCV13 or any vaccine component.",
                            CreatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(6434),
                            Dosage = "The number of doses and schedule can vary depending on the age at initial vaccination and the individual's risk factors.",
                            Name = "Pneumococcal Conjugate Vaccine (PCV13)",
                            Note = "PCV13 is often given as a series of doses during infancy and early childhood, followed by a booster dose in some individuals.",
                            Reason = " Protection against infections caused by Streptococcus pneumoniae, including pneumonia, meningitis, and bloodstream infections.",
                            Route = "Intramuscular injection",
                            SideEffects = "Common side effects include pain, redness, or swelling at the injection site, as well as fever, fussiness, and fatigue.",
                            Type = "Conjugate vaccine",
                            UpdatedAt = new DateTime(2023, 6, 4, 16, 37, 0, 34, DateTimeKind.Local).AddTicks(6437),
                            VaccinationEffectiveness = "PCV13 has been shown to be highly effective in preventing pneumococcal disease caused by the serotypes included in the vaccine."
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("ICDId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InstructionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReportImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("ICDId");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitMedication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DosageNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<string>("NoOfDays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.HasIndex("MedicationId", "VisitId")
                        .IsUnique();

                    b.ToTable("VisitMedications");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitRadLabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitRadLabTests");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitVitalSign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitVitalSigns");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "SystemManager",
                            NormalizedName = "SYSTEMMANAGER"
                        },
                        new
                        {
                            Id = "2",
                            Name = "HealthFacilityManager",
                            NormalizedName = "HEALTHFACILITYAMANAGER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Physician",
                            NormalizedName = "PHYSICIAN"
                        },
                        new
                        {
                            Id = "5",
                            Name = "Pharmacist",
                            NormalizedName = "PHARMACIST"
                        },
                        new
                        {
                            Id = "6",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = "7",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "12345678912341",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "12345678912342",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12345678912348",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12345678912349",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12345678912350",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12345678912343",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "12345678912344",
                            RoleId = "5"
                        },
                        new
                        {
                            UserId = "12345678912351",
                            RoleId = "6"
                        },
                        new
                        {
                            UserId = "12345678912352",
                            RoleId = "6"
                        },
                        new
                        {
                            UserId = "12345678912353",
                            RoleId = "6"
                        },
                        new
                        {
                            UserId = "12345678912346",
                            RoleId = "7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Admit", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany("Admits")
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("Admits")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("HealthFacility");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.AdmitProgressNote", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Admit", "Admit")
                        .WithMany("AdmitProgressNotes")
                        .HasForeignKey("AdmitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.Navigation("Admit");

                    b.Navigation("MedicalTeam");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Allergy", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany("Allergies")
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("Allergies")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.AllergyDrug", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Allergy", "Allergy")
                        .WithMany("AllergyDrugs")
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.Medication", "Medication")
                        .WithMany("AllergyDrugs")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergy");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.BadHabit", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("BadHabits")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.BloodDonation", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("BloodDonations")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDisease", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.ICD", "ICD")
                        .WithMany("ChronicDiseases")
                        .HasForeignKey("ICDId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("ChronicDiseases")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("ICD");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDiseaseDrug", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.ChronicDisease", "ChronicDisease")
                        .WithMany("ChronicDiseaseDrugs")
                        .HasForeignKey("ChronicDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.Medication", "Medication")
                        .WithMany("ChronicDiseaseDrugs")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChronicDisease");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Contraindication", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("Contraindications")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.HealthFacility", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Governorate", "Governorate")
                        .WithMany("HealthFacilitys")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany("HealthFacilities")
                        .HasForeignKey("MedicalTeamId");

                    b.Navigation("Governorate");

                    b.Navigation("MedicalTeam");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.MedicalFacilityTeam", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.HealthFacility", "HealthFacility")
                        .WithMany("MedicalFacilityTeams")
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany("MedicalFacilityTeams")
                        .HasForeignKey("MedicalTeamId");

                    b.Navigation("HealthFacility");

                    b.Navigation("MedicalTeam");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.PhysicalTherapy", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("PhysicalTherapies")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.RadLabResult", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.VisitRadLabTest", "VisitRadLabTest")
                        .WithMany("VisitRadLabResults")
                        .HasForeignKey("VisitRadLabTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthFacility");

                    b.Navigation("MedicalTeam");

                    b.Navigation("VisitRadLabTest");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ReceiveBlood", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Admit", "Admit")
                        .WithMany("ReceiveBloods")
                        .HasForeignKey("AdmitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.Navigation("Admit");

                    b.Navigation("MedicalTeam");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Surgery", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Admit", "Admit")
                        .WithMany("Surgeries")
                        .HasForeignKey("AdmitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.Navigation("Admit");

                    b.Navigation("MedicalTeam");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.SurgeryProgressNote", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.Surgery", "Surgery")
                        .WithMany("SurgeryProgressNotes")
                        .HasForeignKey("SurgeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalTeam");

                    b.Navigation("Surgery");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UserVaccination", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Vaccination", "Vaccination")
                        .WithMany()
                        .HasForeignKey("VaccinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("UserVaccinations")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vaccination");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalData", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithOne("MedicalData")
                        .HasForeignKey("EHR_API.Entities.Models.UsersData.MedicalData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalTeam", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithOne("MedicalTeam")
                        .HasForeignKey("EHR_API.Entities.Models.UsersData.MedicalTeam", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.PersonalData", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Governorate", "Governorate")
                        .WithMany("PersonalData")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithOne("PersonalData")
                        .HasForeignKey("EHR_API.Entities.Models.UsersData.PersonalData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.UserInsurance", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("UserInsurances")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Visit", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.HealthFacility", "HealthFacility")
                        .WithMany("Visits")
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.ICD", "ICD")
                        .WithMany("Visits")
                        .HasForeignKey("ICDId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany("Visits")
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("Visits")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("HealthFacility");

                    b.Navigation("ICD");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitMedication", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Medication", "Medication")
                        .WithMany("VisitMedications")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("VisitMedications")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitRadLabTest", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("VisitRadLabTests")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitVitalSign", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("VisitVitalSigns")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Admit", b =>
                {
                    b.Navigation("AdmitProgressNotes");

                    b.Navigation("ReceiveBloods");

                    b.Navigation("Surgeries");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Allergy", b =>
                {
                    b.Navigation("AllergyDrugs");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDisease", b =>
                {
                    b.Navigation("ChronicDiseaseDrugs");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Governorate", b =>
                {
                    b.Navigation("HealthFacilitys");

                    b.Navigation("PersonalData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.HealthFacility", b =>
                {
                    b.Navigation("MedicalFacilityTeams");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ICD", b =>
                {
                    b.Navigation("ChronicDiseases");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Medication", b =>
                {
                    b.Navigation("AllergyDrugs");

                    b.Navigation("ChronicDiseaseDrugs");

                    b.Navigation("VisitMedications");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Surgery", b =>
                {
                    b.Navigation("SurgeryProgressNotes");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalTeam", b =>
                {
                    b.Navigation("Admits");

                    b.Navigation("Allergies");

                    b.Navigation("HealthFacilities");

                    b.Navigation("MedicalFacilityTeams");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.RegistrationData", b =>
                {
                    b.Navigation("Admits");

                    b.Navigation("Allergies");

                    b.Navigation("BadHabits");

                    b.Navigation("BloodDonations");

                    b.Navigation("ChronicDiseases");

                    b.Navigation("Contraindications");

                    b.Navigation("MedicalData");

                    b.Navigation("MedicalTeam");

                    b.Navigation("PersonalData");

                    b.Navigation("UserInsurances");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Visit", b =>
                {
                    b.Navigation("PhysicalTherapies");

                    b.Navigation("UserVaccinations");

                    b.Navigation("VisitMedications");

                    b.Navigation("VisitRadLabTests");

                    b.Navigation("VisitVitalSigns");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitRadLabTest", b =>
                {
                    b.Navigation("VisitRadLabResults");
                });
#pragma warning restore 612, 618
        }
    }
}
