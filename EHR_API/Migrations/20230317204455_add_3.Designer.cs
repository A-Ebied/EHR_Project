// <auto-generated />
using System;
using EHR_API.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EHRAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230317204455_add_3")]
    partial class add3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EHR_API.Entities.Models.Admit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AdmitAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LeaveAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("Admits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsChronic")
                        .HasColumnType("bit");

                    b.Property<string>("Reaction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("Allergies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Allergen = "التراب",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(7471),
                            Instruction = "---",
                            IsChronic = true,
                            Reaction = "سيلان الأنف والكحة",
                            RegistrationDataId = "12345678912351",
                            Type = "حساسية التراب",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(7472)
                        },
                        new
                        {
                            Id = 2,
                            Allergen = "الفول السوداني والحليب والبيض",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(7475),
                            Instruction = "",
                            IsChronic = true,
                            Reaction = "طفح جلدي",
                            RegistrationDataId = "12345678912352",
                            Type = "حساسية الطعام",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(7475)
                        },
                        new
                        {
                            Id = 3,
                            Allergen = "فراء الحيوانات ، وخاصة من الحيوانات الأليفة مثل القطط والكلاب",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(7479),
                            Instruction = "الابتعاد عن الحيوانات الأليفة",
                            IsChronic = true,
                            Reaction = "ضيق في الصدر وفقدان أنفاسك",
                            RegistrationDataId = "12345678912353",
                            Type = "حساسية الحيوانات الأليفة",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(7480)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.AllergyDrug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AllergyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.HasIndex("AllergyId", "MedicationId")
                        .IsUnique();

                    b.ToTable("AllergyDrugs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllergyId = 1,
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(7840),
                            MedicationId = 1,
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(7841)
                        },
                        new
                        {
                            Id = 2,
                            AllergyId = 1,
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(7843),
                            MedicationId = 2,
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(7844)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.BadHabit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Habit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("BadHabits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(6909),
                            Habit = "التدخين",
                            Notes = "",
                            RegistrationDataId = "12345678912351",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(6910)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(6913),
                            Habit = "التدخين",
                            Notes = "",
                            RegistrationDataId = "12345678912352",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(6913)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(6915),
                            Habit = "شرب الخمور",
                            Notes = "",
                            RegistrationDataId = "12345678912353",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(6915)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.BloodDonation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DonationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("BloodDonations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(6587),
                            DonationDateTime = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(6585),
                            MedicalTeamId = "12345678912347",
                            RegistrationDataId = "12345678912351",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(6588)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(6590),
                            DonationDateTime = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(6589),
                            MedicalTeamId = "12345678912347",
                            RegistrationDataId = "12345678912352",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(6591)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ICDId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ICDId");

                    b.HasIndex("RegistrationDataId", "ICDId")
                        .IsUnique()
                        .HasFilter("[RegistrationDataId] IS NOT NULL AND [ICDId] IS NOT NULL");

                    b.ToTable("ChronicDiseases");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDiseaseDrug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChronicDiseaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.HasIndex("ChronicDiseaseId", "MedicationId")
                        .IsUnique();

                    b.ToTable("ChronicDiseaseDrugs");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Contraindication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContraindiReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsChronic")
                        .HasColumnType("bit");

                    b.Property<string>("ItsEffect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.HasIndex("RegistrationDataId", "MedicationId")
                        .IsUnique()
                        .HasFilter("[RegistrationDataId] IS NOT NULL");

                    b.ToTable("Contraindications");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Governorates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 53, 425, DateTimeKind.Local).AddTicks(1740),
                            Title = "القاهرة",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 53, 425, DateTimeKind.Local).AddTicks(1743)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 53, 425, DateTimeKind.Local).AddTicks(1747),
                            Title = "الجيزة",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 53, 425, DateTimeKind.Local).AddTicks(1748)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 53, 425, DateTimeKind.Local).AddTicks(1749),
                            Title = "مطروح",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 53, 425, DateTimeKind.Local).AddTicks(1749)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 53, 425, DateTimeKind.Local).AddTicks(1750),
                            Title = "شمال سيناء",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 53, 425, DateTimeKind.Local).AddTicks(1751)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 53, 425, DateTimeKind.Local).AddTicks(1752),
                            Title = "الشرقية",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 53, 425, DateTimeKind.Local).AddTicks(1753)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 53, 425, DateTimeKind.Local).AddTicks(1754),
                            Title = "الدقهلية",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 53, 425, DateTimeKind.Local).AddTicks(1754)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.HealthFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubordinateTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateddAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("HealthFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Address1",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(3918),
                            Description = "Description1",
                            Email = "m@gmail.com",
                            GovernorateId = 1,
                            Phone1 = "01123456878",
                            Phone2 = "",
                            Phone3 = "",
                            RegistrationDataId = "12345678912342",
                            SubordinateTo = "المؤسسة العسكرية",
                            Title = "المستشفى العسكري بالشرقية",
                            Type = "مستشفى عسكري",
                            UpdateddAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(3922)
                        },
                        new
                        {
                            Id = 2,
                            Address = "Address2",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(3926),
                            Description = "Description2",
                            Email = "a@gmail.com",
                            GovernorateId = 1,
                            Phone1 = "01122456878",
                            Phone2 = "",
                            Phone3 = "",
                            RegistrationDataId = "12345678912348",
                            SubordinateTo = "وزارة الصحة",
                            Title = "المستشفى العام بالعريش",
                            Type = "مستشفى عام",
                            UpdateddAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(3927)
                        },
                        new
                        {
                            Id = 3,
                            Address = "Address3",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(3929),
                            Description = "Description3",
                            Email = "j@gmail.com",
                            GovernorateId = 1,
                            Phone1 = "01123416878",
                            Phone2 = "",
                            Phone3 = "",
                            RegistrationDataId = "12345678912349",
                            SubordinateTo = "مستشفيات الجامعة",
                            Title = "مستشفى الجامعة بالزقازيق",
                            Type = "مستشفى جامعي",
                            UpdateddAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(3930)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ICD", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiagnosisName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Code");

                    b.ToTable("ICDs");

                    b.HasData(
                        new
                        {
                            Code = "A00.0",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(4270),
                            DiagnosisName = "Cholera due to Vibrio cholerae 01, biovar cholerae",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(4270)
                        },
                        new
                        {
                            Code = "A00.1",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(4273),
                            DiagnosisName = "Cholera due to Vibrio cholerae 01, biovar eltor",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(4273)
                        },
                        new
                        {
                            Code = "A00.9",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(4274),
                            DiagnosisName = "Cholera, unspecified",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(4275)
                        },
                        new
                        {
                            Code = "A01.00",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(4276),
                            DiagnosisName = "Typhoid fever, unspecified",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(4277)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.MedicalFacilityTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("HealthFacilityId", "MedicalTeamId")
                        .IsUnique()
                        .HasFilter("[MedicalTeamId] IS NOT NULL");

                    b.ToTable("MedicalFacilityTeams");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contraindication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Medications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contraindication = "ممنوع على مرضى الكلى والكبد",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(6222),
                            Description = "أقراص",
                            ImageUrl = "/Medication/fexofenadine.jpg",
                            Name = "Fexofenadine (الفيكسوفينادين)",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(6223)
                        },
                        new
                        {
                            Id = 2,
                            Contraindication = "لا يستخدم مع مرضى السكري.....الخ",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(6226),
                            Description = "بخاخ أنف",
                            ImageUrl = "/Medication/NASONEX.jpg",
                            Name = "Nasonex (نازونكس)",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(6227)
                        },
                        new
                        {
                            Id = 3,
                            Contraindication = "لا تستخدم مع أي منتجات أخرى تحتوي على الباراسيتامول. يزيد مرض الكبد الأساسي من خطر تلف الكبد المرتبط بالباراسيتامول. يجب على المرضى الذين تم تشخيص إصابتهم بضعف في الكبد أو الكلى طلب المشورة الطبية قبل تناول هذا الدواء.",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(6228),
                            Description = "أقراص",
                            ImageUrl = "/Medication/advance.jpg",
                            Name = "Panadol Advance (بانادول أدفانس)",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(6229)
                        },
                        new
                        {
                            Id = 4,
                            Contraindication = "فرط الحساسية لأي من المكونات",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(6230),
                            Description = "أقراص",
                            ImageUrl = "/Medication/Kerovit.jpg",
                            Name = "Kerovit (كيروفيت)",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(6231)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.PhysicalTherapy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.ToTable("PhysicalTherapy");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.RadLabResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("ResultNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitRadLabTestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("VisitRadLabTestId");

                    b.ToTable("RadLabResult");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.RadLabResultImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RadLabResultId")
                        .HasColumnType("int");

                    b.Property<string>("ResultImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RadLabResultId");

                    b.ToTable("RadLabResultImages");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ReceiveBlood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AdmitId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("ReceiveBloods");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ReceiveBloodData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiveBloodId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiveType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiveBloodId");

                    b.ToTable("Receives");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Surgery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdmitId");

                    b.HasIndex("MedicalTeamId");

                    b.ToTable("Surgeries");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.SurgeryProgressNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SurgeryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("SurgeryId");

                    b.ToTable("SurgeryProgressNotes");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UserVaccination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VaccinationId")
                        .HasColumnType("int");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VaccinationId");

                    b.HasIndex("VisitId", "VaccinationId")
                        .IsUnique();

                    b.ToTable("UserVaccinations");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DNAImageResultUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MedicalData");

                    b.HasData(
                        new
                        {
                            Id = "12345678912351",
                            BloodGroup = "A+",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5520),
                            DNAImageResultUrl = "",
                            FamilyHistory = "الجد من الأب كان مصاب بالسكري",
                            MedicalHistory = "",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5522)
                        },
                        new
                        {
                            Id = "12345678912352",
                            BloodGroup = "O+",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5525),
                            DNAImageResultUrl = "",
                            FamilyHistory = "الجد من الأب كان مصاب بمرض ذهني",
                            MedicalHistory = "المريض أصيب بحالة من الهلوسة مرتين سابقا",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5525)
                        },
                        new
                        {
                            Id = "12345678912353",
                            BloodGroup = "AB+",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5527),
                            DNAImageResultUrl = "",
                            FamilyHistory = "",
                            MedicalHistory = "",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5527)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalTeam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalSpecialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MedicalTeam");

                    b.HasData(
                        new
                        {
                            Id = "12345678912342",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5869),
                            Degree = "ماجستير جراحة العمود الفقري",
                            MedicalSpecialization = "جراحة العمود الفقري",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5869)
                        },
                        new
                        {
                            Id = "12345678912348",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5871),
                            Degree = "ماجستير أورام العظام",
                            MedicalSpecialization = "أورام العظام",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5872)
                        },
                        new
                        {
                            Id = "12345678912349",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5873),
                            Degree = "دكتوراة أورام المسالك البولية",
                            MedicalSpecialization = "أورام المسالك البولية",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5874)
                        },
                        new
                        {
                            Id = "12345678912350",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5875),
                            Degree = "دكتوراة جراحة القلب",
                            MedicalSpecialization = "جراحة القلب",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5876)
                        },
                        new
                        {
                            Id = "12345678912343",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5878),
                            Degree = "ماجستير أنف وأذن وحنجرة",
                            MedicalSpecialization = "أنف وأذن وحنجرة",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5878)
                        },
                        new
                        {
                            Id = "12345678912344",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5879),
                            Degree = "بكالوريوس الصيدلة",
                            MedicalSpecialization = "طب الصيدلة",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5880)
                        },
                        new
                        {
                            Id = "12345678912346",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5881),
                            Degree = "معهد فني صحي",
                            MedicalSpecialization = "فني أشعة",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5881)
                        },
                        new
                        {
                            Id = "12345678912347",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5883),
                            Degree = "معهد فني تمريض",
                            MedicalSpecialization = "ممرضة",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5883)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.PersonalData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgeGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmergencyPhone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyPhone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<int>("NumOfChildren")
                        .HasColumnType("int");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.ToTable("PersonalData");

                    b.HasData(
                        new
                        {
                            Id = "12345678912351",
                            Address = "",
                            AgeGroup = "",
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5143),
                            EmergencyPhone1 = "01234546788",
                            EmergencyPhone2 = "",
                            Gender = "ذكر",
                            GovernorateId = 1,
                            NumOfChildren = 3,
                            Occupation = "مدرس",
                            Phone1 = "01234546787",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5144),
                            UserImageUrl = ""
                        },
                        new
                        {
                            Id = "12345678912352",
                            Address = "",
                            AgeGroup = "",
                            BirthDate = new DateTime(1960, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5161),
                            EmergencyPhone1 = "01234746788",
                            EmergencyPhone2 = "",
                            Gender = "ذكر",
                            GovernorateId = 3,
                            NumOfChildren = 1,
                            Occupation = "دكتور جامعي",
                            Phone1 = "01234544487",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5161),
                            UserImageUrl = ""
                        },
                        new
                        {
                            Id = "12345678912353",
                            Address = "",
                            AgeGroup = "",
                            BirthDate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5168),
                            EmergencyPhone1 = "01234506788",
                            EmergencyPhone2 = "",
                            Gender = "ذكر",
                            GovernorateId = 2,
                            NumOfChildren = 3,
                            Occupation = "عمل حر",
                            Phone1 = "01234500787",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(5168),
                            UserImageUrl = ""
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.RegistrationData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateddAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "12345678912341",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "140c3780-17a9-42ef-a056-2f941c9fe154",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "k@gmail.com",
                            EmailConfirmed = false,
                            FullName = "أحمد محمد كمال",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "K@GMAIL.COM",
                            NormalizedUserName = "@KAMAL123",
                            PasswordHash = "AQAAAAIAAYagAAAAECTq8apdSC0NRFBCcZYpuaDk7VlA46U+hqCjgXpSc1yvFniRCZ26PF7aokgtA2pQlQ==",
                            PhoneNumber = "01234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "707d984f-d205-4db4-8984-89013b2fdf49",
                            TwoFactorEnabled = false,
                            UpdateddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Kamal123"
                        },
                        new
                        {
                            Id = "12345678912342",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c47afc97-70cf-475b-bea0-26d60a21a660",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "A@gmail.com",
                            EmailConfirmed = false,
                            FullName = "أحمد محمد أحمد",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "A@GMAIL.COM",
                            NormalizedUserName = "@AHMED123",
                            PasswordHash = "AQAAAAIAAYagAAAAECQ5oZp/4lgGAPGcZR3dHrjh1MWUGoy992PsaGnNn3S2iZkHZZl9E1MoH53ugcX2Lg==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5dddb71b-0da7-472e-b8ec-9e8ca4bfd94b",
                            TwoFactorEnabled = false,
                            UpdateddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Ahmed123"
                        },
                        new
                        {
                            Id = "12345678912343",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2b7610d8-c692-447e-83c7-7af6fe55ff36",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "M@gmail.com",
                            EmailConfirmed = false,
                            FullName = "أحمد محمد محمد",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "M@GMAIL.COM",
                            NormalizedUserName = "@MUHAMMAD123",
                            PasswordHash = "AQAAAAIAAYagAAAAEMwkOiqSkjXs6fjqBsFOqnmdKcwUfLsO5P2yhKPpAN3uZCQURKpl9pBwYGq5P3qACQ==",
                            PhoneNumber = "01234567899",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f79eb6b-172e-43fd-9386-368a2bfe5de0",
                            TwoFactorEnabled = false,
                            UpdateddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Muhammad123"
                        },
                        new
                        {
                            Id = "12345678912344",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8d8f2376-c57d-4d32-bc38-6675f9eb1482",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Al@gmail.com",
                            EmailConfirmed = false,
                            FullName = "أحمد محمد علي",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "AL@GMAIL.COM",
                            NormalizedUserName = "@ALI123",
                            PasswordHash = "AQAAAAIAAYagAAAAEEQlPO6T85ML49E9yr04mW8+9kyqN358796cuWjqpjPCxyLjSxW6lXtw/QIeISxYdw==",
                            PhoneNumber = "01234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "035188d3-b3e0-449b-99a7-ff9c76376931",
                            TwoFactorEnabled = false,
                            UpdateddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Ali123"
                        },
                        new
                        {
                            Id = "12345678912346",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f21eec4-7c39-4af1-a4f9-673c3220646d",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ka@gmail.com",
                            EmailConfirmed = false,
                            FullName = "أحمد خاطر علي",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "KA@GMAIL.COM",
                            NormalizedUserName = "@KHATER123",
                            PasswordHash = "AQAAAAIAAYagAAAAECVOwfB5oVi+0wyA0mrlP3Z9QI9RWA+b9zcInS49NErKmnqpc/4R8JIU+fWtugqn+w==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1117d1af-c3c1-4e22-8f89-c39f81373ac8",
                            TwoFactorEnabled = false,
                            UpdateddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Khater123"
                        },
                        new
                        {
                            Id = "12345678912347",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f9b1927-5dee-4f23-9a07-b2f61818af03",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ma@gmail.com",
                            EmailConfirmed = false,
                            FullName = "منال خاطر علي",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "MA@GMAIL.COM",
                            NormalizedUserName = "@MANAL123",
                            PasswordHash = "AQAAAAIAAYagAAAAEKawM10Ys9P9I6m/M0bMbf0Bl5lMG5pdA/3w71PBlDLeXD5EJCxywhrSQ4UdaHTs3A==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2388ba72-98b4-4190-b533-ce2f0f52bf42",
                            TwoFactorEnabled = false,
                            UpdateddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Manal123"
                        },
                        new
                        {
                            Id = "12345678912348",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36703c7e-6c33-4a7c-a0de-f925de09da60",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ma2@gmail.com",
                            EmailConfirmed = false,
                            FullName = "منال خاطر أحمد",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "MA2@GMAIL.COM",
                            NormalizedUserName = "@MANAL2123",
                            PasswordHash = "AQAAAAIAAYagAAAAEAE2Xr897en8aQNeydnQIdqbrIgzwpxJP2Hu0id9YvRFfXtym92i6zsSgXGXraywDg==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b558589b-aca1-44df-ba99-1cba5ac68302",
                            TwoFactorEnabled = false,
                            UpdateddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Manal2123"
                        },
                        new
                        {
                            Id = "12345678912349",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b57be39a-51c2-4179-a1b7-f2f4999300d3",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ka2@gmail.com",
                            EmailConfirmed = false,
                            FullName = "خاطر أحمد",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "KA2@GMAIL.COM",
                            NormalizedUserName = "@KHATER2123",
                            PasswordHash = "AQAAAAIAAYagAAAAEHyA1otph4Dgxez919PVOu1bt/lFI0FgYylnePz2ltlKdN2Rem6D62yIbHnhDYFJNw==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a1593995-b06d-4005-a339-fa994c8fad0c",
                            TwoFactorEnabled = false,
                            UpdateddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Khater2123"
                        },
                        new
                        {
                            Id = "12345678912350",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66f6c84c-2ff2-44a3-af26-e4829e90a629",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "TE@gmail.com",
                            EmailConfirmed = false,
                            FullName = "test",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "TE@GMAIL.COM",
                            NormalizedUserName = "@TEST2123",
                            PasswordHash = "AQAAAAIAAYagAAAAEEDBTp69QQXXlgi1QTA6HKUqPntoeA8N3x0bzn8H3YAaTAaEs80ZQx4ei10rDEWcgg==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e231e44f-83e5-47f2-9d83-358e2cb91af4",
                            TwoFactorEnabled = false,
                            UpdateddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Test2123"
                        },
                        new
                        {
                            Id = "12345678912351",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c65f4be-6eea-4b15-ae78-bb55105f7db9",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Fa@gmail.com",
                            EmailConfirmed = false,
                            FullName = "أحمد فوزي محمد",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "FA@GMAIL.COM",
                            NormalizedUserName = "@FAWZY123",
                            PasswordHash = "AQAAAAIAAYagAAAAEDUe6/Wyk/+gRZBLjHG33yXSVkFiDZSwT7DyQ7C7XY9k94+66RS+nUj/oFsf9qTtXA==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7220365-401e-4ad8-b5ce-37e5d0999264",
                            TwoFactorEnabled = false,
                            UpdateddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Fawzy123"
                        },
                        new
                        {
                            Id = "12345678912352",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89a4fce1-c292-493f-a8ed-92bb11e00848",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AlFa@gmail.com",
                            EmailConfirmed = false,
                            FullName = "علي فوزي محمد",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "ALFA@GMAIL.COM",
                            NormalizedUserName = "@ALIFAWZY123",
                            PasswordHash = "AQAAAAIAAYagAAAAEMEz6Xx7e6hz7LbcoFujgAf89ds7uRWYacQ7PTd0ANqhg0PEBmvzkfX5RZ/V37cO8A==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4afc2295-63ec-48b3-8a7a-b9fb5570e216",
                            TwoFactorEnabled = false,
                            UpdateddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@AliFawzy123"
                        },
                        new
                        {
                            Id = "12345678912353",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce4d411a-ff67-48e2-8aa1-e875dda8a831",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AFa@gmail.com",
                            EmailConfirmed = false,
                            FullName = "علي فوزي أحمد",
                            LockoutEnabled = false,
                            Nationality = "مصري",
                            NormalizedEmail = "AFA@GMAIL.COM",
                            NormalizedUserName = "@AFAWZY123",
                            PasswordHash = "AQAAAAIAAYagAAAAENUcp3DlHevlpYFjylR0xEjrFJeZsLj1nwQVXqkLqkzjR3bPP1RiDeGv6uH2KqF85w==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "01dc261d-9227-49d9-a918-9c62259f4c74",
                            TwoFactorEnabled = false,
                            UpdateddAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@AFawzy123"
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.UserInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsuranceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceOrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("UserInsurances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(4613),
                            InsuranceNo = "123OP",
                            InsuranceOrganizationName = "التأمين الصحي المصري",
                            InsuranceType = "حكومي",
                            RegistrationDataId = "12345678912351",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(4614)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(4616),
                            InsuranceNo = "124OP",
                            InsuranceOrganizationName = "التأمين الصحي المصري",
                            InsuranceType = "حكومي",
                            RegistrationDataId = "12345678912352",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(4617)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Vaccination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgeRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contraindication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SideEffects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VaccinationEffectiveness")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vaccinations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeRange = "2-64 عام",
                            Contraindication = "",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(8180),
                            Dosage = "1 dose",
                            Name = "Vaxchora",
                            Note = "",
                            Reason = "لقاح يستخدم للوقاية من الكوليرا",
                            Route = "عن طريق الفم",
                            SideEffects = "",
                            Type = "حبوب",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(8181),
                            VaccinationEffectiveness = "3-6 أشهر"
                        },
                        new
                        {
                            Id = 2,
                            AgeRange = "من عامين وأكبر",
                            Contraindication = "",
                            CreatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(8184),
                            Dosage = "2 doses, given 1–6 weeks apart ",
                            Name = "Dukoral",
                            Note = "Children aged 2–5 years need 3 doses, given 1 to 6 weeks apart",
                            Reason = "لقاح يستخدم للوقاية من الكوليرا",
                            Route = "عن طريق الفم",
                            SideEffects = "",
                            Type = "حبوب",
                            UpdatedAt = new DateTime(2023, 3, 17, 22, 44, 54, 486, DateTimeKind.Local).AddTicks(8185),
                            VaccinationEffectiveness = "عامين"
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("ICDId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InstructionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReportImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("ICDId");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitMedication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DosageNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<string>("NoOfDays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.HasIndex("MedicationId", "VisitId")
                        .IsUnique();

                    b.ToTable("VisitMedications");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitRadLabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitRadLabTests");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitVitalSign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitVitalSigns");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "SystemManager",
                            NormalizedName = "SYSTEMMANAGER"
                        },
                        new
                        {
                            Id = "2",
                            Name = "HealthFacilityManager",
                            NormalizedName = "HEALTHFACILITYAMANAGER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Physician",
                            NormalizedName = "PHYSICIAN"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Nurse",
                            NormalizedName = "NURSE"
                        },
                        new
                        {
                            Id = "5",
                            Name = "Pharmacist",
                            NormalizedName = "PHARMACIST"
                        },
                        new
                        {
                            Id = "6",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = "7",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "12345678912341",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "12345678912342",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12345678912348",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12345678912349",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12345678912350",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12345678912343",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "12345678912344",
                            RoleId = "5"
                        },
                        new
                        {
                            UserId = "12345678912351",
                            RoleId = "6"
                        },
                        new
                        {
                            UserId = "12345678912352",
                            RoleId = "6"
                        },
                        new
                        {
                            UserId = "12345678912353",
                            RoleId = "6"
                        },
                        new
                        {
                            UserId = "12345678912346",
                            RoleId = "7"
                        },
                        new
                        {
                            UserId = "12345678912347",
                            RoleId = "4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Admit", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany()
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("HealthFacility");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Allergy", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany()
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.AllergyDrug", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Allergy", "Allergy")
                        .WithMany("AllergyDrugs")
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.Medication", "Medication")
                        .WithMany("AllergyDrugs")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergy");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.BadHabit", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany()
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.BloodDonation", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany()
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDisease", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.ICD", "ICD")
                        .WithMany("ChronicDiseases")
                        .HasForeignKey("ICDId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany()
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("ICD");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDiseaseDrug", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.ChronicDisease", "ChronicDisease")
                        .WithMany("ChronicDiseaseDrugs")
                        .HasForeignKey("ChronicDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.Medication", "Medication")
                        .WithMany("ChronicDiseaseDrugs")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChronicDisease");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Contraindication", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany()
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("Medication");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.HealthFacility", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Governorate", "Governorate")
                        .WithMany("HealthFacilitys")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("HealthFacilities")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("Governorate");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.MedicalFacilityTeam", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.HealthFacility", "HealthFacility")
                        .WithMany("MedicalFacilityTeams")
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.Navigation("HealthFacility");

                    b.Navigation("MedicalTeam");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.PhysicalTherapy", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("PhysicalTherapies")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.RadLabResult", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.VisitRadLabTest", "VisitRadLabTest")
                        .WithMany("VisitRadLabResults")
                        .HasForeignKey("VisitRadLabTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthFacility");

                    b.Navigation("VisitRadLabTest");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.RadLabResultImage", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.RadLabResult", "RadLabResult")
                        .WithMany("RadiologyResultImages")
                        .HasForeignKey("RadLabResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RadLabResult");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ReceiveBlood", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Admit", "Admit")
                        .WithMany("ReceiveBloods")
                        .HasForeignKey("AdmitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany()
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("Admit");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ReceiveBloodData", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.ReceiveBlood", "ReceiveBlood")
                        .WithMany("ReceivesBloodData")
                        .HasForeignKey("ReceiveBloodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceiveBlood");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Surgery", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Admit", "Admit")
                        .WithMany("Surgeries")
                        .HasForeignKey("AdmitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.Navigation("Admit");

                    b.Navigation("MedicalTeam");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.SurgeryProgressNote", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.Surgery", "Surgery")
                        .WithMany("SurgeryProgressNotes")
                        .HasForeignKey("SurgeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalTeam");

                    b.Navigation("Surgery");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UserVaccination", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Vaccination", "Vaccination")
                        .WithMany()
                        .HasForeignKey("VaccinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("UserVaccinations")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vaccination");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalData", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithOne("MedicalData")
                        .HasForeignKey("EHR_API.Entities.Models.UsersData.MedicalData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalTeam", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithOne("MedicalTeam")
                        .HasForeignKey("EHR_API.Entities.Models.UsersData.MedicalTeam", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.PersonalData", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Governorate", "Governorate")
                        .WithMany("PersonalData")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithOne("PersonalData")
                        .HasForeignKey("EHR_API.Entities.Models.UsersData.PersonalData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.UserInsurance", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("UserInsurances")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Visit", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.HealthFacility", "HealthFacility")
                        .WithMany("Visits")
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.ICD", "ICD")
                        .WithMany("Visits")
                        .HasForeignKey("ICDId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany()
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("HealthFacility");

                    b.Navigation("ICD");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitMedication", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Medication", "Medication")
                        .WithMany("VisitMedications")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("VisitMedications")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitRadLabTest", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("VisitRadLabTests")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitVitalSign", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("VisitVitalSigns")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Admit", b =>
                {
                    b.Navigation("ReceiveBloods");

                    b.Navigation("Surgeries");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Allergy", b =>
                {
                    b.Navigation("AllergyDrugs");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDisease", b =>
                {
                    b.Navigation("ChronicDiseaseDrugs");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Governorate", b =>
                {
                    b.Navigation("HealthFacilitys");

                    b.Navigation("PersonalData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.HealthFacility", b =>
                {
                    b.Navigation("MedicalFacilityTeams");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ICD", b =>
                {
                    b.Navigation("ChronicDiseases");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Medication", b =>
                {
                    b.Navigation("AllergyDrugs");

                    b.Navigation("ChronicDiseaseDrugs");

                    b.Navigation("VisitMedications");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.RadLabResult", b =>
                {
                    b.Navigation("RadiologyResultImages");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ReceiveBlood", b =>
                {
                    b.Navigation("ReceivesBloodData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Surgery", b =>
                {
                    b.Navigation("SurgeryProgressNotes");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.RegistrationData", b =>
                {
                    b.Navigation("HealthFacilities");

                    b.Navigation("MedicalData");

                    b.Navigation("MedicalTeam");

                    b.Navigation("PersonalData");

                    b.Navigation("UserInsurances");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Visit", b =>
                {
                    b.Navigation("PhysicalTherapies");

                    b.Navigation("UserVaccinations");

                    b.Navigation("VisitMedications");

                    b.Navigation("VisitRadLabTests");

                    b.Navigation("VisitVitalSigns");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitRadLabTest", b =>
                {
                    b.Navigation("VisitRadLabResults");
                });
#pragma warning restore 612, 618
        }
    }
}
