// <auto-generated />
using System;
using EHR_API.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EHRAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230616122444_add5")]
    partial class add5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EHR_API.Entities.Models.Admit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AdmitAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LeaveAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("Admits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.AdmitProgressNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdmitId");

                    b.HasIndex("MedicalTeamId");

                    b.ToTable("AdmitProgressNote");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsChronic")
                        .HasColumnType("bit");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Reaction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("Allergies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Allergen = "Dust mites, Pollen, Pet hair, fur, feathers",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(8225),
                            Instruction = "Avoid allergens",
                            IsChronic = true,
                            MedicalTeamId = "12345678912343",
                            Reaction = "Sneezing ,Runny or stuffy nose, coughing, tightness in the chest, shortness of breath",
                            RegistrationDataId = "12345678912351",
                            Type = "Dust allergy",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(8227)
                        },
                        new
                        {
                            Id = 2,
                            Allergen = "Peanuts, Milk, Eggs",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(8230),
                            Instruction = "",
                            IsChronic = true,
                            MedicalTeamId = "12345678912350",
                            Reaction = "Rash",
                            RegistrationDataId = "12345678912352",
                            Type = "Food Allergy",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(8231)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.AllergyDrug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AllergyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.HasIndex("AllergyId", "MedicationId")
                        .IsUnique();

                    b.ToTable("AllergyDrugs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllergyId = 1,
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(8517),
                            MedicationId = 1,
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(8519)
                        },
                        new
                        {
                            Id = 2,
                            AllergyId = 1,
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(8521),
                            MedicationId = 2,
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(8522)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.BadHabit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Habit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("BadHabits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7928),
                            Habit = "Smoking",
                            Notes = "",
                            RegistrationDataId = "12345678912351",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7930)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7932),
                            Habit = "Smoking",
                            Notes = "",
                            RegistrationDataId = "12345678912352",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7933)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7934),
                            Habit = "Drink Wine",
                            Notes = "",
                            RegistrationDataId = "12345678912353",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7936)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.BloodDonation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DonationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("BloodDonations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7639),
                            DonationDateTime = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7635),
                            MedicalTeamId = "12345678912348",
                            RegistrationDataId = "12345678912351",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7640)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7643),
                            DonationDateTime = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7642),
                            MedicalTeamId = "12345678912348",
                            RegistrationDataId = "12345678912352",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7644)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ICDId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ICDId");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId", "ICDId")
                        .IsUnique()
                        .HasFilter("[RegistrationDataId] IS NOT NULL AND [ICDId] IS NOT NULL");

                    b.ToTable("ChronicDiseases");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDiseaseDrug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChronicDiseaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.HasIndex("ChronicDiseaseId", "MedicationId")
                        .IsUnique();

                    b.ToTable("ChronicDiseaseDrugs");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Contraindication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contraindications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsChronic")
                        .HasColumnType("bit");

                    b.Property<string>("ItsEffect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("Contraindications");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Governorates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 43, 405, DateTimeKind.Local).AddTicks(5101),
                            Title = "Cairo",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 43, 405, DateTimeKind.Local).AddTicks(5156)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 43, 405, DateTimeKind.Local).AddTicks(5159),
                            Title = "Giza",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 43, 405, DateTimeKind.Local).AddTicks(5161)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 43, 405, DateTimeKind.Local).AddTicks(5163),
                            Title = "Matrouh",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 43, 405, DateTimeKind.Local).AddTicks(5164)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 43, 405, DateTimeKind.Local).AddTicks(5166),
                            Title = "North Sinai",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 43, 405, DateTimeKind.Local).AddTicks(5168)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 43, 405, DateTimeKind.Local).AddTicks(5170),
                            Title = "Sharkia",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 43, 405, DateTimeKind.Local).AddTicks(5171)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 43, 405, DateTimeKind.Local).AddTicks(5174),
                            Title = "Dakahlia",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 43, 405, DateTimeKind.Local).AddTicks(5176)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.HealthFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubordinateTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("MedicalTeamId");

                    b.ToTable("HealthFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Address1",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(4882),
                            Description = "Description1",
                            Email = "m@gmail.com",
                            GovernorateId = 1,
                            MedicalTeamId = "12345678912342",
                            Phone1 = "01123456878",
                            Phone2 = "",
                            Phone3 = "",
                            SubordinateTo = "The military Establishment",
                            Title = "Sharkia Military Hospital",
                            Type = "Military Hospital",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(4939)
                        },
                        new
                        {
                            Id = 2,
                            Address = "Address2",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(4945),
                            Description = "Description2",
                            Email = "a@gmail.com",
                            GovernorateId = 1,
                            MedicalTeamId = "12345678912348",
                            Phone1 = "01122456878",
                            Phone2 = "",
                            Phone3 = "",
                            SubordinateTo = "Ministry of Health",
                            Title = "Arish Hospital",
                            Type = "Government Hospital",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(4946)
                        },
                        new
                        {
                            Id = 3,
                            Address = "Address3",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(4948),
                            Description = "Description3",
                            Email = "j@gmail.com",
                            GovernorateId = 1,
                            MedicalTeamId = "12345678912349",
                            Phone1 = "01123416878",
                            Phone2 = "",
                            Phone3 = "",
                            SubordinateTo = "University Hospitals",
                            Title = "University Hospital, Zagazig",
                            Type = "University Hospital",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(4949)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ICD", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiagnosisName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Code");

                    b.ToTable("ICDs");

                    b.HasData(
                        new
                        {
                            Code = "A00.0",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(5306),
                            DiagnosisName = "Cholera due to Vibrio cholerae 01, biovar cholerae",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(5309)
                        },
                        new
                        {
                            Code = "A00.1",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(5312),
                            DiagnosisName = "Cholera due to Vibrio cholerae 01, biovar eltor",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(5313)
                        },
                        new
                        {
                            Code = "A00.9",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(5314),
                            DiagnosisName = "Cholera, unspecified",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(5316)
                        },
                        new
                        {
                            Code = "A01.00",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(5317),
                            DiagnosisName = "Typhoid fever, unspecified",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(5318)
                        },
                        new
                        {
                            Code = "J18.9",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(5320),
                            DiagnosisName = "Pneumonia",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(5321)
                        },
                        new
                        {
                            Code = " I10",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(5322),
                            DiagnosisName = "Essential (primary) hypertension",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(5324)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.MedicalFacilityTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("HealthFacilityId", "MedicalTeamId")
                        .IsUnique()
                        .HasFilter("[MedicalTeamId] IS NOT NULL");

                    b.ToTable("MedicalFacilityTeams");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contraindication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Medications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contraindication = "Forbidden for patients with kidneys and liver.",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7328),
                            Description = "Route, Oral",
                            ImageUrl = "/files/Medication/fexofenadine.jpg",
                            Name = "Fexofenadine",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7331)
                        },
                        new
                        {
                            Id = 2,
                            Contraindication = "-",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7333),
                            Description = "Nasal Spray",
                            ImageUrl = "/files/Medication/NASONEX.jpg",
                            Name = "Nasonex",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7334)
                        },
                        new
                        {
                            Id = 3,
                            Contraindication = "Do not use with any other paracetamol containing products.",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7336),
                            Description = "Route, Oral",
                            ImageUrl = "/files/Medication/advance.jpg",
                            Name = "Panadol Advance",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7337)
                        },
                        new
                        {
                            Id = 4,
                            Contraindication = "-",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7339),
                            Description = "Route, Oral",
                            ImageUrl = "/files/Medication/Kerovit.jpg",
                            Name = "Kerovit",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7340)
                        },
                        new
                        {
                            Id = 5,
                            Contraindication = "Allergy to any of the components of the drug",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7342),
                            Description = "Route, Oral",
                            ImageUrl = "/files/Medication/CiproCoupons.png",
                            Name = "Cipro",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7344)
                        },
                        new
                        {
                            Id = 6,
                            Contraindication = "Allergy to any of the components of the drug",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7345),
                            Description = "Route, Oral",
                            ImageUrl = "/files/Medication/Oracea.jpg",
                            Name = "Oracea",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7346)
                        },
                        new
                        {
                            Id = 7,
                            Contraindication = "",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7348),
                            Description = "Route, Oral",
                            ImageUrl = "/files/Medication/Hydrochlorothiazide.jpg",
                            Name = "Hydrochlorothiazide",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7349)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.PhysicalTherapy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.ToTable("PhysicalTherapy");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.RadLabResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResultNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitRadLabTestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("VisitRadLabTestId");

                    b.ToTable("RadLabResult");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ReceiveBlood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitId")
                        .HasColumnType("int");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReceiveType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdmitId");

                    b.HasIndex("MedicalTeamId");

                    b.ToTable("ReceiveBloods");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Surgery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdmitId");

                    b.HasIndex("MedicalTeamId");

                    b.ToTable("Surgeries");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.SurgeryProgressNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SurgeryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("SurgeryId");

                    b.ToTable("SurgeryProgressNotes");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UserVaccination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VaccinationId")
                        .HasColumnType("int");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VaccinationId");

                    b.HasIndex("VisitId", "VaccinationId")
                        .IsUnique();

                    b.ToTable("UserVaccinations");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DNAImageResultUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MedicalData");

                    b.HasData(
                        new
                        {
                            Id = "12345678912351",
                            BloodGroup = "A+",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(6579),
                            DNAImageResultUrl = "",
                            FamilyHistory = "Paternal grandfather had diabetes",
                            MedicalHistory = "",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(6582)
                        },
                        new
                        {
                            Id = "12345678912352",
                            BloodGroup = "O+",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(6584),
                            DNAImageResultUrl = "",
                            FamilyHistory = "The paternal grandfather had a mental illness.",
                            MedicalHistory = "The patient had hallucinations twice previously.",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(6585)
                        },
                        new
                        {
                            Id = "12345678912353",
                            BloodGroup = "AB+",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(6587),
                            DNAImageResultUrl = "",
                            FamilyHistory = "",
                            MedicalHistory = "",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(6588)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalTeam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalSpecialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MedicalTeam");

                    b.HasData(
                        new
                        {
                            Id = "12345678912342",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(6877),
                            Degree = "PhD in pulmonary diseases",
                            MedicalSpecialization = "Pulmonologist",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(6880)
                        },
                        new
                        {
                            Id = "12345678912348",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(6882),
                            Degree = "Master of Orthopedic Oncology",
                            MedicalSpecialization = "Orthopaedic Oncology Surgeon",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(6883)
                        },
                        new
                        {
                            Id = "12345678912349",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(6885),
                            Degree = "PhD in urological oncology",
                            MedicalSpecialization = "Urologic Oncologist",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(6886)
                        },
                        new
                        {
                            Id = "12345678912350",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(6888),
                            Degree = "PhD in Internal medicine",
                            MedicalSpecialization = "Internal medicine physician",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(6889)
                        },
                        new
                        {
                            Id = "12345678912343",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7004),
                            Degree = "Master of Otolaryngology",
                            MedicalSpecialization = "Otolaryngology",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7006)
                        },
                        new
                        {
                            Id = "12345678912344",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7008),
                            Degree = "Bachelor's degree in pharmacy",
                            MedicalSpecialization = "Pharmacist",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7009)
                        },
                        new
                        {
                            Id = "12345678912346",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7010),
                            Degree = "Institute of Technical healthy",
                            MedicalSpecialization = "Radiology technician",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(7011)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.PersonalData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgeGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmergencyPhone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyPhone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<int>("NumOfChildren")
                        .HasColumnType("int");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.ToTable("PersonalData");

                    b.HasData(
                        new
                        {
                            Id = "12345678912351",
                            Address = "",
                            AgeGroup = "",
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(6242),
                            EmergencyPhone1 = "01234546788",
                            EmergencyPhone2 = "",
                            Gender = "Male",
                            GovernorateId = 1,
                            NumOfChildren = 3,
                            Occupation = "Teacher",
                            Phone1 = "01234546787",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(6245),
                            UserImageUrl = ""
                        },
                        new
                        {
                            Id = "12345678912352",
                            Address = "",
                            AgeGroup = "",
                            BirthDate = new DateTime(1960, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(6254),
                            EmergencyPhone1 = "01234746788",
                            EmergencyPhone2 = "",
                            Gender = "Male",
                            GovernorateId = 3,
                            NumOfChildren = 1,
                            Occupation = "Professor",
                            Phone1 = "01234544487",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(6255),
                            UserImageUrl = ""
                        },
                        new
                        {
                            Id = "12345678912353",
                            Address = "",
                            AgeGroup = "",
                            BirthDate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(6261),
                            EmergencyPhone1 = "01234506788",
                            EmergencyPhone2 = "",
                            Gender = "Male",
                            GovernorateId = 2,
                            NumOfChildren = 3,
                            Occupation = "",
                            Phone1 = "01234500787",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(6262),
                            UserImageUrl = ""
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.RegistrationData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmEmailCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ForgotPasswordCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "12345678912341",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dab73287-9a3c-4cab-ac35-dbdeaa378dc9",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "k@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ahmed Mohamed Kamal",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "K@GMAIL.COM",
                            NormalizedUserName = "@KAMAL123",
                            PasswordHash = "AQAAAAIAAYagAAAAEFwagwIHTq6+gVRVlFOeKjlG4wsuzOLjxpwFy6BKAE6TcxB3oIXCg0O43fUKZ7ICEA==",
                            PhoneNumber = "01234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a8ec5af2-4e66-4305-b5ac-44c0a763d448",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Kamal123"
                        },
                        new
                        {
                            Id = "12345678912342",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98e2011d-cab2-4b2a-bd05-cb496ad6befb",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "M@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ahmed Mohamed Ahmed",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "M@GMAIL.COM",
                            NormalizedUserName = "@AHMED123",
                            PasswordHash = "AQAAAAIAAYagAAAAEOH64hwZFhcEZFFWRiZ0KTS5CLVnpdjZHh+vCF0dpOpMWkfpNEppS4uaC41Todkhbw==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fcad3e5d-404b-4571-88ae-f3a8d16dcf4a",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Ahmed123"
                        },
                        new
                        {
                            Id = "12345678912343",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "72d62526-7b4a-4f8c-8d58-e2fc4b3cc286",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "muha75375@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ahmed Mohamed Mohamed",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "MUHA75375@GMAIL.COM",
                            NormalizedUserName = "@MUHAMMAD123",
                            PasswordHash = "AQAAAAIAAYagAAAAEPhx9tC0jg9DQaDxjJXRKmjSUGcvOqaVfMsDhSU1iHjMiPoGKD1kOtlXl6ktuI2YsA==",
                            PhoneNumber = "01234567899",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d2823ea6-2754-42a6-9d30-06fdc4a1787f",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Muhammad123"
                        },
                        new
                        {
                            Id = "12345678912344",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9d4e8a5-2ed4-4ee4-9fd5-8716445d5007",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Al@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ahmed Mohammed Ali",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "AL@GMAIL.COM",
                            NormalizedUserName = "@ALI123",
                            PasswordHash = "AQAAAAIAAYagAAAAEDVpslSr1hgNPSu/sj5xfKJzUXMDfocPLI3geT29y5sm/EjKPEfm6pOSgt+0lHF2cg==",
                            PhoneNumber = "01234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "21d3c9e5-4c8a-4480-8a12-35dc4e425cc4",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Ali123"
                        },
                        new
                        {
                            Id = "12345678912346",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc094c3f-75d2-451e-aad7-8e49a33878e0",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ka@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ahmed Khater Ali",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "KA@GMAIL.COM",
                            NormalizedUserName = "@KHATER123",
                            PasswordHash = "AQAAAAIAAYagAAAAECvToswRSp+dVRvpNwnualu0rgxY2/d8lwk05TYWkZ73y4/u2Dak4UV/fXhB8W4UfQ==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f04b104-8dfd-4e8e-8e85-ca404693d7ba",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Khater123"
                        },
                        new
                        {
                            Id = "12345678912348",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac0aaea1-fec6-414b-b8a8-bd9f2a87bb7a",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ma2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Manal Khater Ahmed",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "MA2@GMAIL.COM",
                            NormalizedUserName = "@MANAL2123",
                            PasswordHash = "AQAAAAIAAYagAAAAEIRW07LcIprl7FqZ33J/bRINa+J82ugb1DrDm55D7IroFDhdbSbGe+IEafYWVFDZTw==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9656a3ad-4422-4934-aba6-4ee20476fe92",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Manal2123"
                        },
                        new
                        {
                            Id = "12345678912349",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c559a7ad-7fe4-49db-8b71-7ff9aab0f894",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ka2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Khater Ahmed",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "KA2@GMAIL.COM",
                            NormalizedUserName = "@KHATER2123",
                            PasswordHash = "AQAAAAIAAYagAAAAEFSapDy1QCif2Kc18uZcOGSe+AalH/5OX0y9o047Ok6FEgumASH3UKIuKHF4c1I25g==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "938d851e-2746-41a0-b5dd-ce80347ada61",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Khater2123"
                        },
                        new
                        {
                            Id = "12345678912350",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aee0d581-0c4d-43f5-8c2f-037776597487",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "TE@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ali Khater Ahmed",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "TE@GMAIL.COM",
                            NormalizedUserName = "@TEST2123",
                            PasswordHash = "AQAAAAIAAYagAAAAEO/424o9WWzQfz/kwfFYnNUdpFXQPM0xQwjzaaPziWhq6gfhRdv6NRjGrebDbA/K2w==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "93148e47-6113-4922-833d-60871f48b684",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@AlI2123"
                        },
                        new
                        {
                            Id = "12345678912351",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e28c5b2f-b0d3-42af-9698-ee3d83bd15c8",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Fa@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ahmed Fawzy Mohamed",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "FA@GMAIL.COM",
                            NormalizedUserName = "@FAWZY123",
                            PasswordHash = "AQAAAAIAAYagAAAAELPdkA3dxPL0hbGAOB6IL5PByc+hxEWUfDPqqJ+RYuWE9UKqh2eYXpM448U8aGyrLA==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5cad907-03d8-4465-80e1-fc097bd1dd37",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Fawzy123"
                        },
                        new
                        {
                            Id = "12345678912352",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d83d45b2-0d4d-42ac-ab1e-6b49d96147e6",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AlFa@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ali Fawzy Muhammad",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "ALFA@GMAIL.COM",
                            NormalizedUserName = "@ALIFAWZY123",
                            PasswordHash = "AQAAAAIAAYagAAAAEDaFP/SxCIDum8msELgGnX216KpPss7tfvEb2U+Lli+LQqmcoZmEXoFNfVEwGyCuew==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2d14b2c8-9b61-4d66-9a82-292cdffe7fd1",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@AliFawzy123"
                        },
                        new
                        {
                            Id = "12345678912353",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4cde35f5-dc06-44bd-8874-d2c1705370c1",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AFa@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ali Fawzy Ahmed",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "AFA@GMAIL.COM",
                            NormalizedUserName = "@AFAWZY123",
                            PasswordHash = "AQAAAAIAAYagAAAAECqACyv+wYRPjxNDiPEB1/qfEHFWQCtOMYUCLCio8L/Jay61J6sSwR27y/Iwh1se6A==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a821ae9a-a47f-44c2-8911-163dce0959b9",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@AFawzy123"
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.UserInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsuranceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceOrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("UserInsurances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(5648),
                            InsuranceNo = "123OP",
                            InsuranceOrganizationName = "Egyptian health insurance",
                            InsuranceType = "Governmental",
                            RegistrationDataId = "12345678912351",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(5651)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(5653),
                            InsuranceNo = "124OP",
                            InsuranceOrganizationName = "Egyptian health insurance",
                            InsuranceType = "Governmental",
                            RegistrationDataId = "12345678912352",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(5654)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Vaccination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgeRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contraindication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SideEffects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VaccinationEffectiveness")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vaccinations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeRange = "Typically given in two doses during childhood",
                            Contraindication = "Severe allergic reaction to a previous dose or vaccine components",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(8805),
                            Dosage = "Two doses, usually administered at 12-15 months and 4-6 years of age",
                            Name = "Measles, Mumps, and Rubella (MMR)",
                            Note = "MMR vaccination is an important part of Egypt's immunization program.",
                            Reason = "Protection against measles, mumps, and rubella",
                            Route = "Subcutaneous injection",
                            SideEffects = "Mild side effects include fever, rash, and temporary joint pain",
                            Type = "Live attenuated vaccine",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(8808),
                            VaccinationEffectiveness = "Highly effective in preventing the target diseases"
                        },
                        new
                        {
                            Id = 2,
                            AgeRange = "Multiple doses given during infancy and childhood",
                            Contraindication = "Severe allergic reaction to a previous dose",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(8811),
                            Dosage = "Typically administered as a series of four doses",
                            Name = "Polio",
                            Note = "Polio vaccination is crucial for maintaining Egypt's polio-free status.",
                            Reason = "Protection against poliovirus infection",
                            Route = "Intramuscular injection or oral administration",
                            SideEffects = "Mild side effects include pain or swelling at the injection site",
                            Type = "Inactivated vaccine (inactivated polio vaccine or IPV)",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(8812),
                            VaccinationEffectiveness = "Highly effective in preventing polio"
                        },
                        new
                        {
                            Id = 3,
                            AgeRange = "Usually given during childhood or as a catch-up vaccine for older individuals",
                            Contraindication = "Allergy to vaccine components",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(8814),
                            Dosage = "Typically administered as a series of two doses",
                            Name = "Hepatitis A",
                            Note = "Hepatitis A vaccination is recommended for individuals traveling to areas with a high prevalence of the disease.",
                            Reason = "Protection against hepatitis A virus infection",
                            Route = "Intramuscular injection",
                            SideEffects = "Mild side effects include pain at the injection site, headache, and fatigue",
                            Type = "Inactivated vaccine",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(8815),
                            VaccinationEffectiveness = "Highly effective in preventing hepatitis A"
                        },
                        new
                        {
                            Id = 4,
                            AgeRange = "Recommended for individuals six months of age and older",
                            Contraindication = "Severe allergic reaction to a previous dose or vaccine components",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(8818),
                            Dosage = "Annual vaccination, as the flu strains change every year",
                            Name = "Influenza (Flu)",
                            Note = "Annual influenza vaccination is recommended, especially for high-risk groups.",
                            Reason = "Protection against seasonal influenza viruses",
                            Route = "Intramuscular injection or nasal spray",
                            SideEffects = "Mild side effects include soreness at the injection site, low-grade fever, and muscle aches",
                            Type = "Inactivated vaccine (influenza vaccine)",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(8819),
                            VaccinationEffectiveness = "Varies each year due to different strains, but overall effective in reducing the severity of flu symptoms"
                        },
                        new
                        {
                            Id = 5,
                            AgeRange = "It is recommended for infants and young children, as well as adults with certain medical conditions or risk factors. The specific age recommendations may vary by country.",
                            Contraindication = "Severe allergic reaction (anaphylaxis) to a previous dose of PCV13 or any vaccine component.",
                            CreatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(8821),
                            Dosage = "The number of doses and schedule can vary depending on the age at initial vaccination and the individual's risk factors.",
                            Name = "Pneumococcal Conjugate Vaccine (PCV13)",
                            Note = "PCV13 is often given as a series of doses during infancy and early childhood, followed by a booster dose in some individuals.",
                            Reason = " Protection against infections caused by Streptococcus pneumoniae, including pneumonia, meningitis, and bloodstream infections.",
                            Route = "Intramuscular injection",
                            SideEffects = "Common side effects include pain, redness, or swelling at the injection site, as well as fever, fussiness, and fatigue.",
                            Type = "Conjugate vaccine",
                            UpdatedAt = new DateTime(2023, 6, 16, 15, 24, 44, 173, DateTimeKind.Local).AddTicks(8822),
                            VaccinationEffectiveness = "PCV13 has been shown to be highly effective in preventing pneumococcal disease caused by the serotypes included in the vaccine."
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("ICDId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InstructionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReportImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("ICDId");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitMedication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DosageNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<string>("NoOfDays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.HasIndex("MedicationId", "VisitId")
                        .IsUnique();

                    b.ToTable("VisitMedications");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitRadLabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitRadLabTests");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitVitalSign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitVitalSigns");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "SystemManager",
                            NormalizedName = "SYSTEMMANAGER"
                        },
                        new
                        {
                            Id = "2",
                            Name = "HealthFacilityManager",
                            NormalizedName = "HEALTHFACILITYMANAGER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Physician",
                            NormalizedName = "PHYSICIAN"
                        },
                        new
                        {
                            Id = "5",
                            Name = "Pharmacist",
                            NormalizedName = "PHARMACIST"
                        },
                        new
                        {
                            Id = "6",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = "7",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "12345678912341",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "12345678912342",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12345678912348",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12345678912349",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12345678912350",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12345678912343",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "12345678912344",
                            RoleId = "5"
                        },
                        new
                        {
                            UserId = "12345678912351",
                            RoleId = "6"
                        },
                        new
                        {
                            UserId = "12345678912352",
                            RoleId = "6"
                        },
                        new
                        {
                            UserId = "12345678912353",
                            RoleId = "6"
                        },
                        new
                        {
                            UserId = "12345678912346",
                            RoleId = "7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Admit", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany("Admits")
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("Admits")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("HealthFacility");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.AdmitProgressNote", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Admit", "Admit")
                        .WithMany("AdmitProgressNotes")
                        .HasForeignKey("AdmitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.Navigation("Admit");

                    b.Navigation("MedicalTeam");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Allergy", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany("Allergies")
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("Allergies")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.AllergyDrug", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Allergy", "Allergy")
                        .WithMany("AllergyDrugs")
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.Medication", "Medication")
                        .WithMany("AllergyDrugs")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergy");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.BadHabit", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("BadHabits")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.BloodDonation", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("BloodDonations")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDisease", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.ICD", "ICD")
                        .WithMany("ChronicDiseases")
                        .HasForeignKey("ICDId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("ChronicDiseases")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("ICD");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDiseaseDrug", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.ChronicDisease", "ChronicDisease")
                        .WithMany("ChronicDiseaseDrugs")
                        .HasForeignKey("ChronicDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.Medication", "Medication")
                        .WithMany("ChronicDiseaseDrugs")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChronicDisease");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Contraindication", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("Contraindications")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.HealthFacility", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Governorate", "Governorate")
                        .WithMany("HealthFacilitys")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany("HealthFacilities")
                        .HasForeignKey("MedicalTeamId");

                    b.Navigation("Governorate");

                    b.Navigation("MedicalTeam");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.MedicalFacilityTeam", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.HealthFacility", "HealthFacility")
                        .WithMany("MedicalFacilityTeams")
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany("MedicalFacilityTeams")
                        .HasForeignKey("MedicalTeamId");

                    b.Navigation("HealthFacility");

                    b.Navigation("MedicalTeam");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.PhysicalTherapy", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("PhysicalTherapies")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.RadLabResult", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.VisitRadLabTest", "VisitRadLabTest")
                        .WithMany("VisitRadLabResults")
                        .HasForeignKey("VisitRadLabTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthFacility");

                    b.Navigation("MedicalTeam");

                    b.Navigation("VisitRadLabTest");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ReceiveBlood", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Admit", "Admit")
                        .WithMany("ReceiveBloods")
                        .HasForeignKey("AdmitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.Navigation("Admit");

                    b.Navigation("MedicalTeam");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Surgery", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Admit", "Admit")
                        .WithMany("Surgeries")
                        .HasForeignKey("AdmitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.Navigation("Admit");

                    b.Navigation("MedicalTeam");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.SurgeryProgressNote", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.Surgery", "Surgery")
                        .WithMany("SurgeryProgressNotes")
                        .HasForeignKey("SurgeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalTeam");

                    b.Navigation("Surgery");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UserVaccination", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Vaccination", "Vaccination")
                        .WithMany()
                        .HasForeignKey("VaccinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("UserVaccinations")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vaccination");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalData", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithOne("MedicalData")
                        .HasForeignKey("EHR_API.Entities.Models.UsersData.MedicalData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalTeam", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithOne("MedicalTeam")
                        .HasForeignKey("EHR_API.Entities.Models.UsersData.MedicalTeam", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.PersonalData", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Governorate", "Governorate")
                        .WithMany("PersonalData")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithOne("PersonalData")
                        .HasForeignKey("EHR_API.Entities.Models.UsersData.PersonalData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.UserInsurance", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("UserInsurances")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Visit", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.HealthFacility", "HealthFacility")
                        .WithMany("Visits")
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.ICD", "ICD")
                        .WithMany("Visits")
                        .HasForeignKey("ICDId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany("Visits")
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("Visits")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("HealthFacility");

                    b.Navigation("ICD");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitMedication", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Medication", "Medication")
                        .WithMany("VisitMedications")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("VisitMedications")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitRadLabTest", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("VisitRadLabTests")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitVitalSign", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("VisitVitalSigns")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Admit", b =>
                {
                    b.Navigation("AdmitProgressNotes");

                    b.Navigation("ReceiveBloods");

                    b.Navigation("Surgeries");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Allergy", b =>
                {
                    b.Navigation("AllergyDrugs");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDisease", b =>
                {
                    b.Navigation("ChronicDiseaseDrugs");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Governorate", b =>
                {
                    b.Navigation("HealthFacilitys");

                    b.Navigation("PersonalData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.HealthFacility", b =>
                {
                    b.Navigation("MedicalFacilityTeams");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ICD", b =>
                {
                    b.Navigation("ChronicDiseases");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Medication", b =>
                {
                    b.Navigation("AllergyDrugs");

                    b.Navigation("ChronicDiseaseDrugs");

                    b.Navigation("VisitMedications");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Surgery", b =>
                {
                    b.Navigation("SurgeryProgressNotes");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalTeam", b =>
                {
                    b.Navigation("Admits");

                    b.Navigation("Allergies");

                    b.Navigation("HealthFacilities");

                    b.Navigation("MedicalFacilityTeams");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.RegistrationData", b =>
                {
                    b.Navigation("Admits");

                    b.Navigation("Allergies");

                    b.Navigation("BadHabits");

                    b.Navigation("BloodDonations");

                    b.Navigation("ChronicDiseases");

                    b.Navigation("Contraindications");

                    b.Navigation("MedicalData");

                    b.Navigation("MedicalTeam");

                    b.Navigation("PersonalData");

                    b.Navigation("UserInsurances");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Visit", b =>
                {
                    b.Navigation("PhysicalTherapies");

                    b.Navigation("UserVaccinations");

                    b.Navigation("VisitMedications");

                    b.Navigation("VisitRadLabTests");

                    b.Navigation("VisitVitalSigns");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitRadLabTest", b =>
                {
                    b.Navigation("VisitRadLabResults");
                });
#pragma warning restore 612, 618
        }
    }
}
