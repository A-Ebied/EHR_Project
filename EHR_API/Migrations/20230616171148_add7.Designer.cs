// <auto-generated />
using System;
using EHR_API.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EHRAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230616171148_add7")]
    partial class add7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EHR_API.Entities.Models.Admit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AdmitAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LeaveAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("Admits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.AdmitProgressNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdmitId");

                    b.HasIndex("MedicalTeamId");

                    b.ToTable("AdmitProgressNote");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsChronic")
                        .HasColumnType("bit");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Reaction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("Allergies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Allergen = "Dust mites, Pollen, Pet hair, fur, feathers",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(3874),
                            Instruction = "Avoid allergens",
                            IsChronic = true,
                            MedicalTeamId = "12345678912343",
                            Reaction = "Sneezing ,Runny or stuffy nose, coughing, tightness in the chest, shortness of breath",
                            RegistrationDataId = "12345678912351",
                            Type = "Dust allergy",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(3877)
                        },
                        new
                        {
                            Id = 2,
                            Allergen = "Peanuts, Milk, Eggs",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(3881),
                            Instruction = "",
                            IsChronic = true,
                            MedicalTeamId = "12345678912350",
                            Reaction = "Rash",
                            RegistrationDataId = "12345678912352",
                            Type = "Food Allergy",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(3882)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.AllergyDrug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AllergyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.HasIndex("AllergyId", "MedicationId")
                        .IsUnique();

                    b.ToTable("AllergyDrugs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllergyId = 1,
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(4458),
                            MedicationId = 1,
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(4463)
                        },
                        new
                        {
                            Id = 2,
                            AllergyId = 1,
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(4466),
                            MedicationId = 2,
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(4467)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.BadHabit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Habit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("BadHabits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(3465),
                            Habit = "Smoking",
                            Notes = "",
                            RegistrationDataId = "12345678912351",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(3468)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(3473),
                            Habit = "Smoking",
                            Notes = "",
                            RegistrationDataId = "12345678912352",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(3474)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(3477),
                            Habit = "Drink Wine",
                            Notes = "",
                            RegistrationDataId = "12345678912353",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(3478)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.BloodDonation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DonationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("BloodDonations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(3072),
                            DonationDateTime = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(3065),
                            MedicalTeamId = "12345678912348",
                            RegistrationDataId = "12345678912351",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(3074)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(3078),
                            DonationDateTime = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(3076),
                            MedicalTeamId = "12345678912348",
                            RegistrationDataId = "12345678912352",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(3080)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ICDCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ICDCode");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId", "ICDCode")
                        .IsUnique()
                        .HasFilter("[RegistrationDataId] IS NOT NULL AND [ICDCode] IS NOT NULL");

                    b.ToTable("ChronicDiseases");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDiseaseDrug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChronicDiseaseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.HasIndex("ChronicDiseaseId", "MedicationId")
                        .IsUnique();

                    b.ToTable("ChronicDiseaseDrugs");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Contraindication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contraindications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsChronic")
                        .HasColumnType("bit");

                    b.Property<string>("ItsEffect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("Contraindications");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Governorates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 46, 121, DateTimeKind.Local).AddTicks(7567),
                            Title = "Cairo",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 46, 121, DateTimeKind.Local).AddTicks(7668)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 46, 121, DateTimeKind.Local).AddTicks(7676),
                            Title = "Giza",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 46, 121, DateTimeKind.Local).AddTicks(7679)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 46, 121, DateTimeKind.Local).AddTicks(7683),
                            Title = "Matrouh",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 46, 121, DateTimeKind.Local).AddTicks(7686)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 46, 121, DateTimeKind.Local).AddTicks(7690),
                            Title = "North Sinai",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 46, 121, DateTimeKind.Local).AddTicks(7693)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 46, 121, DateTimeKind.Local).AddTicks(7697),
                            Title = "Sharkia",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 46, 121, DateTimeKind.Local).AddTicks(7700)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 46, 121, DateTimeKind.Local).AddTicks(7706),
                            Title = "Dakahlia",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 46, 121, DateTimeKind.Local).AddTicks(7709)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.HealthFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubordinateTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("MedicalTeamId");

                    b.ToTable("HealthFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Address1",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 306, DateTimeKind.Local).AddTicks(9446),
                            Description = "Description1",
                            Email = "m@gmail.com",
                            GovernorateId = 1,
                            MedicalTeamId = "12345678912342",
                            Phone1 = "01123456878",
                            Phone2 = "",
                            Phone3 = "",
                            SubordinateTo = "The military Establishment",
                            Title = "Sharkia Military Hospital",
                            Type = "Military Hospital",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 306, DateTimeKind.Local).AddTicks(9519)
                        },
                        new
                        {
                            Id = 2,
                            Address = "Address2",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 306, DateTimeKind.Local).AddTicks(9525),
                            Description = "Description2",
                            Email = "a@gmail.com",
                            GovernorateId = 1,
                            MedicalTeamId = "12345678912348",
                            Phone1 = "01122456878",
                            Phone2 = "",
                            Phone3 = "",
                            SubordinateTo = "Ministry of Health",
                            Title = "Arish Hospital",
                            Type = "Government Hospital",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 306, DateTimeKind.Local).AddTicks(9527)
                        },
                        new
                        {
                            Id = 3,
                            Address = "Address3",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 306, DateTimeKind.Local).AddTicks(9530),
                            Description = "Description3",
                            Email = "j@gmail.com",
                            GovernorateId = 1,
                            MedicalTeamId = "12345678912349",
                            Phone1 = "01123416878",
                            Phone2 = "",
                            Phone3 = "",
                            SubordinateTo = "University Hospitals",
                            Title = "University Hospital, Zagazig",
                            Type = "University Hospital",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 306, DateTimeKind.Local).AddTicks(9532)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ICD", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiagnosisName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Code");

                    b.ToTable("ICDs");

                    b.HasData(
                        new
                        {
                            Code = "A00.0",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 306, DateTimeKind.Local).AddTicks(9875),
                            DiagnosisName = "Cholera due to Vibrio cholerae 01, biovar cholerae",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 306, DateTimeKind.Local).AddTicks(9877)
                        },
                        new
                        {
                            Code = "A00.1",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 306, DateTimeKind.Local).AddTicks(9881),
                            DiagnosisName = "Cholera due to Vibrio cholerae 01, biovar eltor",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 306, DateTimeKind.Local).AddTicks(9882)
                        },
                        new
                        {
                            Code = "A00.9",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 306, DateTimeKind.Local).AddTicks(9885),
                            DiagnosisName = "Cholera, unspecified",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 306, DateTimeKind.Local).AddTicks(9886)
                        },
                        new
                        {
                            Code = "A01.00",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 306, DateTimeKind.Local).AddTicks(9888),
                            DiagnosisName = "Typhoid fever, unspecified",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 306, DateTimeKind.Local).AddTicks(9889)
                        },
                        new
                        {
                            Code = "J18.9",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 306, DateTimeKind.Local).AddTicks(9892),
                            DiagnosisName = "Pneumonia",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 306, DateTimeKind.Local).AddTicks(9893)
                        },
                        new
                        {
                            Code = " I10",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 306, DateTimeKind.Local).AddTicks(9895),
                            DiagnosisName = "Essential (primary) hypertension",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 306, DateTimeKind.Local).AddTicks(9897)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.MedicalFacilityTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("HealthFacilityId", "MedicalTeamId")
                        .IsUnique()
                        .HasFilter("[MedicalTeamId] IS NOT NULL");

                    b.ToTable("MedicalFacilityTeams");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contraindication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Medications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Contraindication = "Forbidden for patients with kidneys and liver.",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(2498),
                            Description = "Route, Oral",
                            ImageUrl = "/files/Medication/fexofenadine.jpg",
                            Name = "Fexofenadine",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(2502)
                        },
                        new
                        {
                            Id = 2,
                            Contraindication = "-",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(2506),
                            Description = "Nasal Spray",
                            ImageUrl = "/files/Medication/NASONEX.jpg",
                            Name = "Nasonex",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(2507)
                        },
                        new
                        {
                            Id = 3,
                            Contraindication = "Do not use with any other paracetamol containing products.",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(2510),
                            Description = "Route, Oral",
                            ImageUrl = "/files/Medication/advance.jpg",
                            Name = "Panadol Advance",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(2511)
                        },
                        new
                        {
                            Id = 4,
                            Contraindication = "-",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(2514),
                            Description = "Route, Oral",
                            ImageUrl = "/files/Medication/Kerovit.jpg",
                            Name = "Kerovit",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(2515)
                        },
                        new
                        {
                            Id = 5,
                            Contraindication = "Allergy to any of the components of the drug",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(2518),
                            Description = "Route, Oral",
                            ImageUrl = "/files/Medication/CiproCoupons.png",
                            Name = "Cipro",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(2519)
                        },
                        new
                        {
                            Id = 6,
                            Contraindication = "Allergy to any of the components of the drug",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(2522),
                            Description = "Route, Oral",
                            ImageUrl = "/files/Medication/Oracea.jpg",
                            Name = "Oracea",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(2523)
                        },
                        new
                        {
                            Id = 7,
                            Contraindication = "",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(2525),
                            Description = "Route, Oral",
                            ImageUrl = "/files/Medication/Hydrochlorothiazide.jpg",
                            Name = "Hydrochlorothiazide",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(2527)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.PhysicalTherapy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.ToTable("PhysicalTherapy");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.RadLabResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResultNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitRadLabTestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("VisitRadLabTestId");

                    b.ToTable("RadLabResult");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ReceiveBlood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitId")
                        .HasColumnType("int");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReceiveType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdmitId");

                    b.HasIndex("MedicalTeamId");

                    b.ToTable("ReceiveBloods");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Surgery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdmitId");

                    b.HasIndex("MedicalTeamId");

                    b.ToTable("Surgeries");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.SurgeryProgressNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SurgeryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("SurgeryId");

                    b.ToTable("SurgeryProgressNotes");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UserVaccination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VaccinationId")
                        .HasColumnType("int");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VaccinationId");

                    b.HasIndex("VisitId", "VaccinationId")
                        .IsUnique();

                    b.ToTable("UserVaccinations");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DNAImageResultUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MedicalData");

                    b.HasData(
                        new
                        {
                            Id = "12345678912351",
                            BloodGroup = "A+",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(1232),
                            DNAImageResultUrl = "",
                            FamilyHistory = "Paternal grandfather had diabetes",
                            MedicalHistory = "",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(1236)
                        },
                        new
                        {
                            Id = "12345678912352",
                            BloodGroup = "O+",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(1313),
                            DNAImageResultUrl = "",
                            FamilyHistory = "The paternal grandfather had a mental illness.",
                            MedicalHistory = "The patient had hallucinations twice previously.",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(1315)
                        },
                        new
                        {
                            Id = "12345678912353",
                            BloodGroup = "AB+",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(1319),
                            DNAImageResultUrl = "",
                            FamilyHistory = "",
                            MedicalHistory = "",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(1320)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalTeam", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalSpecialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MedicalTeam");

                    b.HasData(
                        new
                        {
                            Id = "12345678912342",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(1886),
                            Degree = "PhD in pulmonary diseases",
                            MedicalSpecialization = "Pulmonologist",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(1889)
                        },
                        new
                        {
                            Id = "12345678912348",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(1893),
                            Degree = "Master of Orthopedic Oncology",
                            MedicalSpecialization = "Orthopaedic Oncology Surgeon",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(1895)
                        },
                        new
                        {
                            Id = "12345678912349",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(1898),
                            Degree = "PhD in urological oncology",
                            MedicalSpecialization = "Urologic Oncologist",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(1899)
                        },
                        new
                        {
                            Id = "12345678912350",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(1902),
                            Degree = "PhD in Internal medicine",
                            MedicalSpecialization = "Internal medicine physician",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(1903)
                        },
                        new
                        {
                            Id = "12345678912343",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(1910),
                            Degree = "Master of Otolaryngology",
                            MedicalSpecialization = "Otolaryngology",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(1912)
                        },
                        new
                        {
                            Id = "12345678912344",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(1914),
                            Degree = "Bachelor's degree in pharmacy",
                            MedicalSpecialization = "Pharmacist",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(1915)
                        },
                        new
                        {
                            Id = "12345678912346",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(1918),
                            Degree = "Institute of Technical healthy",
                            MedicalSpecialization = "Radiology technician",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(1919)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.PersonalData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgeGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmergencyPhone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyPhone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<int>("NumOfChildren")
                        .HasColumnType("int");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.ToTable("PersonalData");

                    b.HasData(
                        new
                        {
                            Id = "12345678912351",
                            Address = "",
                            AgeGroup = "",
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(836),
                            EmergencyPhone1 = "01234546788",
                            EmergencyPhone2 = "",
                            Gender = "Male",
                            GovernorateId = 1,
                            NumOfChildren = 3,
                            Occupation = "Teacher",
                            Phone1 = "01234546787",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(842),
                            UserImageUrl = ""
                        },
                        new
                        {
                            Id = "12345678912352",
                            Address = "",
                            AgeGroup = "",
                            BirthDate = new DateTime(1960, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(855),
                            EmergencyPhone1 = "01234746788",
                            EmergencyPhone2 = "",
                            Gender = "Male",
                            GovernorateId = 3,
                            NumOfChildren = 1,
                            Occupation = "Professor",
                            Phone1 = "01234544487",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(857),
                            UserImageUrl = ""
                        },
                        new
                        {
                            Id = "12345678912353",
                            Address = "",
                            AgeGroup = "",
                            BirthDate = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(865),
                            EmergencyPhone1 = "01234506788",
                            EmergencyPhone2 = "",
                            Gender = "Male",
                            GovernorateId = 2,
                            NumOfChildren = 3,
                            Occupation = "",
                            Phone1 = "01234500787",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(867),
                            UserImageUrl = ""
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.RegistrationData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmEmailCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ForgotPasswordCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "12345678912341",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94a49f76-ae1f-42de-9109-3132090cd704",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "k@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ahmed Mohamed Kamal",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "K@GMAIL.COM",
                            NormalizedUserName = "@KAMAL123",
                            PasswordHash = "AQAAAAIAAYagAAAAEBWOXDvkK5llcXZPwr9wUohWcc68MmCbaujlz3rCSpKUtCfCQcRp729bldkqk5XcgQ==",
                            PhoneNumber = "01234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d49eb1db-1cb0-4798-8b8a-2ce6f94552b1",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Kamal123"
                        },
                        new
                        {
                            Id = "12345678912342",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f16f6130-615e-4f05-a0eb-0f96b6cea945",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "M@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ahmed Mohamed Ahmed",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "M@GMAIL.COM",
                            NormalizedUserName = "@AHMED123",
                            PasswordHash = "AQAAAAIAAYagAAAAEKSI4mI8GKHrXF4gdgCQqFI6euErUDlFWKHvUYsFhbkgKXDPAe9BSdXM9B78/TnM7w==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b24a19b-e69d-4b3b-a7c6-63d15a4fa363",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Ahmed123"
                        },
                        new
                        {
                            Id = "12345678912343",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "45d2ea23-b339-4c3d-b087-325241761441",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "muha75375@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ahmed Mohamed Mohamed",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "MUHA75375@GMAIL.COM",
                            NormalizedUserName = "@MUHAMMAD123",
                            PasswordHash = "AQAAAAIAAYagAAAAEMwxe+tk5CWUYIGiMQXejkYIxqaGNnNDGGZU4ZsKcnuq//kyTDTkCUfQ+IYsvh+aJg==",
                            PhoneNumber = "01234567899",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d0d0e63-c058-46b6-82d6-f1b019f7a1dd",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Muhammad123"
                        },
                        new
                        {
                            Id = "12345678912344",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "995e76e6-1a75-41f7-8e47-95d142074339",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Al@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ahmed Mohammed Ali",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "AL@GMAIL.COM",
                            NormalizedUserName = "@ALI123",
                            PasswordHash = "AQAAAAIAAYagAAAAEJsVGGtB4DXyJtIpxkAC/wwfQNVFRNJZzj3LKaF8QD/F/A7BT9GmTbjJLj86+4BDAw==",
                            PhoneNumber = "01234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "570700a8-b5ed-468e-94cd-4395a73273dc",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Ali123"
                        },
                        new
                        {
                            Id = "12345678912346",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3321c54e-1c66-4814-872a-6b26f5925998",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ka@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ahmed Khater Ali",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "KA@GMAIL.COM",
                            NormalizedUserName = "@KHATER123",
                            PasswordHash = "AQAAAAIAAYagAAAAEPw8eBtFSKIdGXNIAFV8bMi7kZQ9R7vd4+hOOhDO6WCuy6or95mJOn7jhLY7Sjdu2w==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fadd2525-ad0d-43a3-a0d3-dd8c66e9886a",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Khater123"
                        },
                        new
                        {
                            Id = "12345678912348",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55d4efda-ea75-454b-b1b1-45d488520b54",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ma2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Manal Khater Ahmed",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "MA2@GMAIL.COM",
                            NormalizedUserName = "@MANAL2123",
                            PasswordHash = "AQAAAAIAAYagAAAAEEdtdcOZP7dkApjQV9OjUeUR2vyU2c7kIoUZs4Wlv42mwFoEd15qjFH34esAJJC71g==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ed9e1dc-6cb0-4b0b-97ed-51bee736ffc9",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Manal2123"
                        },
                        new
                        {
                            Id = "12345678912349",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "67766fa4-5db6-4948-9c0e-ffaeef52caa5",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ka2@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Khater Ahmed",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "KA2@GMAIL.COM",
                            NormalizedUserName = "@KHATER2123",
                            PasswordHash = "AQAAAAIAAYagAAAAEL0VpGC7/tmlSA0UJSnK31vVQQI+U8qg9kCn9DbJPW3SjSJ9Szn9ov0vvCK9ju7HRQ==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b74afbe8-087e-4726-a1fd-a85b21595fbf",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Khater2123"
                        },
                        new
                        {
                            Id = "12345678912350",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8e8d782-6e4c-4a89-a4ca-38be2c3ce55c",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "TE@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ali Khater Ahmed",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "TE@GMAIL.COM",
                            NormalizedUserName = "@TEST2123",
                            PasswordHash = "AQAAAAIAAYagAAAAENzoUYvbUgRBAT2qJFVmnUxFVVGU3Ebkme4kh+Lj8/IfB2Cy6zQcHwxZaKn5GTz2Yg==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fdc9e181-1550-49bb-b94b-5a493e25b3d0",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@AlI2123"
                        },
                        new
                        {
                            Id = "12345678912351",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c2f08d2-4baa-4459-8c82-dcd4cceffc5b",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Fa@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ahmed Fawzy Mohamed",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "FA@GMAIL.COM",
                            NormalizedUserName = "@FAWZY123",
                            PasswordHash = "AQAAAAIAAYagAAAAEMObqYg20ZWVFtyQuLxamXNgh2IWfhSTVkov+l8UkSmSaPszSNnOdxrtoq3ejF8hVw==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "90d83166-2e6a-41c0-9953-9b91a143bd12",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@Fawzy123"
                        },
                        new
                        {
                            Id = "12345678912352",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6ebdaf1-7ec3-4927-a7c3-ba5814a10fcd",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AlFa@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ali Fawzy Muhammad",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "ALFA@GMAIL.COM",
                            NormalizedUserName = "@ALIFAWZY123",
                            PasswordHash = "AQAAAAIAAYagAAAAEBAdo2WEx7KyUODBmrj6dUMQ6Q8Mof5+xJVzc5/pgjwNFZcVUgZUQDFfPpWTtm8I5A==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b6b6a508-eddd-4cbd-87f9-38062ab81451",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@AliFawzy123"
                        },
                        new
                        {
                            Id = "12345678912353",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2fc4d66-2181-4923-95bb-8553d0615b4c",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "AFa@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ali Fawzy Ahmed",
                            LockoutEnabled = false,
                            Nationality = "Egyptian",
                            NormalizedEmail = "AFA@GMAIL.COM",
                            NormalizedUserName = "@AFAWZY123",
                            PasswordHash = "AQAAAAIAAYagAAAAEP5mQKgIR6eYtNfZMaz3x6mMmvQM/pzoQ+ARwBiPYXDLgw1gBCBMi002c5fk71aHOQ==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a1e0cdb-4ee8-4d47-91dd-f5479ddc9033",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "@AFawzy123"
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.UserInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsuranceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceOrganizationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("UserInsurances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(246),
                            InsuranceNo = "123OP",
                            InsuranceOrganizationName = "Egyptian health insurance",
                            InsuranceType = "Governmental",
                            RegistrationDataId = "12345678912351",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(250)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(254),
                            InsuranceNo = "124OP",
                            InsuranceOrganizationName = "Egyptian health insurance",
                            InsuranceType = "Governmental",
                            RegistrationDataId = "12345678912352",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(255)
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Vaccination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgeRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contraindication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SideEffects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VaccinationEffectiveness")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vaccinations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeRange = "Typically given in two doses during childhood",
                            Contraindication = "Severe allergic reaction to a previous dose or vaccine components",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(4824),
                            Dosage = "Two doses, usually administered at 12-15 months and 4-6 years of age",
                            Name = "Measles, Mumps, and Rubella (MMR)",
                            Note = "MMR vaccination is an important part of Egypt's immunization program.",
                            Reason = "Protection against measles, mumps, and rubella",
                            Route = "Subcutaneous injection",
                            SideEffects = "Mild side effects include fever, rash, and temporary joint pain",
                            Type = "Live attenuated vaccine",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(4827),
                            VaccinationEffectiveness = "Highly effective in preventing the target diseases"
                        },
                        new
                        {
                            Id = 2,
                            AgeRange = "Multiple doses given during infancy and childhood",
                            Contraindication = "Severe allergic reaction to a previous dose",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(4831),
                            Dosage = "Typically administered as a series of four doses",
                            Name = "Polio",
                            Note = "Polio vaccination is crucial for maintaining Egypt's polio-free status.",
                            Reason = "Protection against poliovirus infection",
                            Route = "Intramuscular injection or oral administration",
                            SideEffects = "Mild side effects include pain or swelling at the injection site",
                            Type = "Inactivated vaccine (inactivated polio vaccine or IPV)",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(4833),
                            VaccinationEffectiveness = "Highly effective in preventing polio"
                        },
                        new
                        {
                            Id = 3,
                            AgeRange = "Usually given during childhood or as a catch-up vaccine for older individuals",
                            Contraindication = "Allergy to vaccine components",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(4836),
                            Dosage = "Typically administered as a series of two doses",
                            Name = "Hepatitis A",
                            Note = "Hepatitis A vaccination is recommended for individuals traveling to areas with a high prevalence of the disease.",
                            Reason = "Protection against hepatitis A virus infection",
                            Route = "Intramuscular injection",
                            SideEffects = "Mild side effects include pain at the injection site, headache, and fatigue",
                            Type = "Inactivated vaccine",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(4838),
                            VaccinationEffectiveness = "Highly effective in preventing hepatitis A"
                        },
                        new
                        {
                            Id = 4,
                            AgeRange = "Recommended for individuals six months of age and older",
                            Contraindication = "Severe allergic reaction to a previous dose or vaccine components",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(4841),
                            Dosage = "Annual vaccination, as the flu strains change every year",
                            Name = "Influenza (Flu)",
                            Note = "Annual influenza vaccination is recommended, especially for high-risk groups.",
                            Reason = "Protection against seasonal influenza viruses",
                            Route = "Intramuscular injection or nasal spray",
                            SideEffects = "Mild side effects include soreness at the injection site, low-grade fever, and muscle aches",
                            Type = "Inactivated vaccine (influenza vaccine)",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(4843),
                            VaccinationEffectiveness = "Varies each year due to different strains, but overall effective in reducing the severity of flu symptoms"
                        },
                        new
                        {
                            Id = 5,
                            AgeRange = "It is recommended for infants and young children, as well as adults with certain medical conditions or risk factors. The specific age recommendations may vary by country.",
                            Contraindication = "Severe allergic reaction (anaphylaxis) to a previous dose of PCV13 or any vaccine component.",
                            CreatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(4846),
                            Dosage = "The number of doses and schedule can vary depending on the age at initial vaccination and the individual's risk factors.",
                            Name = "Pneumococcal Conjugate Vaccine (PCV13)",
                            Note = "PCV13 is often given as a series of doses during infancy and early childhood, followed by a booster dose in some individuals.",
                            Reason = " Protection against infections caused by Streptococcus pneumoniae, including pneumonia, meningitis, and bloodstream infections.",
                            Route = "Intramuscular injection",
                            SideEffects = "Common side effects include pain, redness, or swelling at the injection site, as well as fever, fussiness, and fatigue.",
                            Type = "Conjugate vaccine",
                            UpdatedAt = new DateTime(2023, 6, 16, 20, 11, 47, 307, DateTimeKind.Local).AddTicks(4847),
                            VaccinationEffectiveness = "PCV13 has been shown to be highly effective in preventing pneumococcal disease caused by the serotypes included in the vaccine."
                        });
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HealthFacilityId")
                        .HasColumnType("int");

                    b.Property<string>("ICDId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InstructionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalTeamId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReportImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HealthFacilityId");

                    b.HasIndex("ICDId");

                    b.HasIndex("MedicalTeamId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitMedication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DosageNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int");

                    b.Property<string>("NoOfDays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.HasIndex("MedicationId", "VisitId")
                        .IsUnique();

                    b.ToTable("VisitMedications");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitRadLabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitRadLabTests");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitVitalSign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitVitalSigns");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "SystemManager",
                            NormalizedName = "SYSTEMMANAGER"
                        },
                        new
                        {
                            Id = "2",
                            Name = "HealthFacilityManager",
                            NormalizedName = "HEALTHFACILITYMANAGER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Physician",
                            NormalizedName = "PHYSICIAN"
                        },
                        new
                        {
                            Id = "5",
                            Name = "Pharmacist",
                            NormalizedName = "PHARMACIST"
                        },
                        new
                        {
                            Id = "6",
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = "7",
                            Name = "Technician",
                            NormalizedName = "TECHNICIAN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "12345678912341",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "12345678912342",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12345678912348",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12345678912349",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12345678912350",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "12345678912343",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "12345678912344",
                            RoleId = "5"
                        },
                        new
                        {
                            UserId = "12345678912351",
                            RoleId = "6"
                        },
                        new
                        {
                            UserId = "12345678912352",
                            RoleId = "6"
                        },
                        new
                        {
                            UserId = "12345678912353",
                            RoleId = "6"
                        },
                        new
                        {
                            UserId = "12345678912346",
                            RoleId = "7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Admit", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany("Admits")
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("Admits")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("HealthFacility");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.AdmitProgressNote", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Admit", "Admit")
                        .WithMany("AdmitProgressNotes")
                        .HasForeignKey("AdmitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.Navigation("Admit");

                    b.Navigation("MedicalTeam");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Allergy", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany("Allergies")
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("Allergies")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.AllergyDrug", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Allergy", "Allergy")
                        .WithMany("AllergyDrugs")
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.Medication", "Medication")
                        .WithMany("AllergyDrugs")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Allergy");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.BadHabit", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("BadHabits")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.BloodDonation", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("BloodDonations")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDisease", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.ICD", "ICD")
                        .WithMany("ChronicDiseases")
                        .HasForeignKey("ICDCode");

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("ChronicDiseases")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("ICD");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDiseaseDrug", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.ChronicDisease", "ChronicDisease")
                        .WithMany("ChronicDiseaseDrugs")
                        .HasForeignKey("ChronicDiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.Medication", "Medication")
                        .WithMany("ChronicDiseaseDrugs")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChronicDisease");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Contraindication", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("Contraindications")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.HealthFacility", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Governorate", "Governorate")
                        .WithMany("HealthFacilitys")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany("HealthFacilities")
                        .HasForeignKey("MedicalTeamId");

                    b.Navigation("Governorate");

                    b.Navigation("MedicalTeam");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.MedicalFacilityTeam", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.HealthFacility", "HealthFacility")
                        .WithMany("MedicalFacilityTeams")
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany("MedicalFacilityTeams")
                        .HasForeignKey("MedicalTeamId");

                    b.Navigation("HealthFacility");

                    b.Navigation("MedicalTeam");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.PhysicalTherapy", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("PhysicalTherapies")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.RadLabResult", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.HealthFacility", "HealthFacility")
                        .WithMany()
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.VisitRadLabTest", "VisitRadLabTest")
                        .WithMany("VisitRadLabResults")
                        .HasForeignKey("VisitRadLabTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthFacility");

                    b.Navigation("MedicalTeam");

                    b.Navigation("VisitRadLabTest");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ReceiveBlood", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Admit", "Admit")
                        .WithMany("ReceiveBloods")
                        .HasForeignKey("AdmitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.Navigation("Admit");

                    b.Navigation("MedicalTeam");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Surgery", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Admit", "Admit")
                        .WithMany("Surgeries")
                        .HasForeignKey("AdmitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.Navigation("Admit");

                    b.Navigation("MedicalTeam");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.SurgeryProgressNote", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany()
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.Surgery", "Surgery")
                        .WithMany("SurgeryProgressNotes")
                        .HasForeignKey("SurgeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalTeam");

                    b.Navigation("Surgery");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UserVaccination", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Vaccination", "Vaccination")
                        .WithMany()
                        .HasForeignKey("VaccinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("UserVaccinations")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vaccination");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalData", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithOne("MedicalData")
                        .HasForeignKey("EHR_API.Entities.Models.UsersData.MedicalData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalTeam", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithOne("MedicalTeam")
                        .HasForeignKey("EHR_API.Entities.Models.UsersData.MedicalTeam", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.PersonalData", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Governorate", "Governorate")
                        .WithMany("PersonalData")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithOne("PersonalData")
                        .HasForeignKey("EHR_API.Entities.Models.UsersData.PersonalData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.UserInsurance", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("UserInsurances")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Visit", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.HealthFacility", "HealthFacility")
                        .WithMany("Visits")
                        .HasForeignKey("HealthFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.ICD", "ICD")
                        .WithMany("Visits")
                        .HasForeignKey("ICDId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.MedicalTeam", "MedicalTeam")
                        .WithMany("Visits")
                        .HasForeignKey("MedicalTeamId");

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", "RegistrationData")
                        .WithMany("Visits")
                        .HasForeignKey("RegistrationDataId");

                    b.Navigation("HealthFacility");

                    b.Navigation("ICD");

                    b.Navigation("MedicalTeam");

                    b.Navigation("RegistrationData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitMedication", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Medication", "Medication")
                        .WithMany("VisitMedications")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("VisitMedications")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitRadLabTest", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("VisitRadLabTests")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitVitalSign", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.Visit", "Visit")
                        .WithMany("VisitVitalSigns")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EHR_API.Entities.Models.UsersData.RegistrationData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Admit", b =>
                {
                    b.Navigation("AdmitProgressNotes");

                    b.Navigation("ReceiveBloods");

                    b.Navigation("Surgeries");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Allergy", b =>
                {
                    b.Navigation("AllergyDrugs");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ChronicDisease", b =>
                {
                    b.Navigation("ChronicDiseaseDrugs");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Governorate", b =>
                {
                    b.Navigation("HealthFacilitys");

                    b.Navigation("PersonalData");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.HealthFacility", b =>
                {
                    b.Navigation("MedicalFacilityTeams");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.ICD", b =>
                {
                    b.Navigation("ChronicDiseases");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Medication", b =>
                {
                    b.Navigation("AllergyDrugs");

                    b.Navigation("ChronicDiseaseDrugs");

                    b.Navigation("VisitMedications");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Surgery", b =>
                {
                    b.Navigation("SurgeryProgressNotes");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.MedicalTeam", b =>
                {
                    b.Navigation("Admits");

                    b.Navigation("Allergies");

                    b.Navigation("HealthFacilities");

                    b.Navigation("MedicalFacilityTeams");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.UsersData.RegistrationData", b =>
                {
                    b.Navigation("Admits");

                    b.Navigation("Allergies");

                    b.Navigation("BadHabits");

                    b.Navigation("BloodDonations");

                    b.Navigation("ChronicDiseases");

                    b.Navigation("Contraindications");

                    b.Navigation("MedicalData");

                    b.Navigation("MedicalTeam");

                    b.Navigation("PersonalData");

                    b.Navigation("UserInsurances");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.Visit", b =>
                {
                    b.Navigation("PhysicalTherapies");

                    b.Navigation("UserVaccinations");

                    b.Navigation("VisitMedications");

                    b.Navigation("VisitRadLabTests");

                    b.Navigation("VisitVitalSigns");
                });

            modelBuilder.Entity("EHR_API.Entities.Models.VisitRadLabTest", b =>
                {
                    b.Navigation("VisitRadLabResults");
                });
#pragma warning restore 612, 618
        }
    }
}
